load_search_index({"pages":[{"title":"Crafty","text":"Crafty is a package bundled with all needed configurations to make your Frontend build environment a joy to work with. Installation and usage Install npm install @swissquote\/crafty \\ @swissquote\/crafty-preset-babel \\ @swissquote\/crafty-preset-postcss \\ @swissquote\/crafty-preset-jest \\ @swissquote\/crafty-runner-webpack \\ @swissquote\/crafty-runner-gulp Configure In crafty.config.js add module.exports = { presets: [ \"@swissquote\/crafty-preset-babel\", \"@swissquote\/crafty-preset-postcss\", \"@swissquote\/crafty-preset-jest\", \"@swissquote\/crafty-runner-webpack\", \"@swissquote\/crafty-runner-gulp\" ], js: { app: { runner: \"webpack\", source: \"js\/app.js\" } }, css: { app: { source: \"css\/app.scss\", watch: [\"css\/**\"] } } }; Run You can run the commands using npx or by adding them to the scripts section of your package.json npx crafty run npx crafty test With this configuration you get: Create a JavaScript bundle compiled with Webpack and Babel. Linted your JavaScript with ESLint. Create a CSS bundle compiled with PostCSS. Lint your CSS with Stylelint. Run your tests with Jest and compile them with Babel. Why Getting started in a web application is easy, write an index.html, a style.css, and a script.js file and you\u2019re good to go. But on bigger apps you might want some CSS preprocessing ? but which one to choose ? Sass, Less, Stylus, PostCSS ? Then you want to write your JavaScript using EcmaScript 2015+, but do you transpile it with Traceur or Babel ? Then you have to package your JavaScript in bundles, you have the choice between rollup.js, Browserify, Webpack or Pundle. Now you want to lint your JavaScript, do you choose ESLint or JSHint ? To orchestrate all this, do you use Gulp, Broccoli or Grunt ? You guessed it, each tool in the JavaScript stack has at least two alternatives, and there is not always a clear winner. This lead to a \u201cJavaScript Fatigue\u201d in the community these last years and some people got lost in what tools to choose to do these tasks. But even when you chose the tool you want to work with, you still have to configure it, maintain it up to date and follow up on changes. Crafty is an attempt to create a package that is simple to install and configure. Specify your JavaScript and CSS files in entry and get them compiled, compressed and linted with the best tools available. Each tool is fine-tuned to give the best and to follow Swissquote\u2019s Guidelines and best practices for Frontend development. Most aspects of Crafty are configurable and updates are painless. More on Why Features The main feature of Crafty is to compile your JavaScript, CSS, compress your images and deliver them in the target directory. But shortening the list of features you gain with Crafty to one sentence doesn\u2019t give it\u2019s full measure. Here\u2019s some other features it has: JavaScript Write EcmaScript 2015, transpiled to JavaScript all browsers understand with Babel. Write TypeScript, transpiled to EcmaScript 5 with the TypeScript compiler. Bundle all JavaScript files together with the help of Webpack. Compress the output with Terser to create the smallest possible bundles. Lint your code with ESLint, points you to possible mistakes and formatting errors. Simple debugging with Source Maps. Read more about features here CSS Preprocess your CSS using PostCSS and plugins that will allow to write in a syntax approaching the one of Sass. Some plugins include postcss-nested to nest your styles, some plugins to use Future CSS features today and postcss-advanced-variables to define mixins Compress the CSS output with postcss-csso to get the smallest possible file. Automatically add vendor prefixes to properties with autoprefixer. Simple Debugging with Source Maps Read more about features here Images With the help of crafty-preset-images you can also compress your images (svg\/png\/jpg\/gif). Read more about features and configuration here Watching for Changes \/ Hot Module Replacement By running the gulp watch command, a process is launched to trigger a rebuild of your asset on each change in src\/main\/frontend. A change on the configuration while Watching will reconfigure itself. For Assets built with Webpack this can be even more powerful : after compiling your code, it can change the code within the browsers without reloading. Here\u2019s an example: Read more about watch Maven, Node.js and Gulp Swissquote\u2019s build environment is based mainly on Maven and it\u2019s plugin ecosystem. But the Frontend world relies on Node.js tooling to build JavaScript and CSS assets. To use the best of both worlds, we take advantage of the maven-frontend-plugin. This plugin will ensure a Node.js version is installed and will run an npm install to install our JavaScript dependencies. We also use Gulp, a JavaScript task runner (can be seen a bit like Ant but for the JavaScript world). Crafty is the glue that will take all these pieces we mentioned, and build you assets with the best-in-class tools. Working with Swissquote\u2019s JavaScript and CSS Guidelines as well. Everything bundled in a way that mvn clean install will build your assets like you would expect with pure Java plugins. Getting started To get started, follow the guide","tags":"","url":"index.html"},{"title":"Getting Started","text":"To get started, you need to follow at least these steps : Install Crafty and the presets you wish to use. Create a crafty.config.js files to declare your JavaScript and CSS bundles. (for Maven projects) Configure your project to use the frontend-maven-plugin to guarantee the version of NPM\/Yarn and Node. Required knowledge To be able to use Crafty, you need to have a basic understanding of what NPM\/Yarn do; Basic knowledge of npm install Know how to run commands installed through NPM (npx your_command or node_modules\/.bin\/your_command) Understand npm run and the script field All User guides Getting Started Configuring the build in a blank project Configuring the build in a maven project Create a configuration file Productivity Developing Faster with Crafty watch References Available options in crafty.config.js","tags":"","url":"Getting_Started.html"},{"title":"Use Cases","text":"You can combine Crafty presets and runners the way you wish. To make it easy, we prepared some use cases for you to start. Compiling CSS with PostCSS Compiling JavaScript with Babel Compiling TypeScript Compressing Images Testing your code with Jest","tags":"","url":"Use_Cases\/index.html"},{"title":"Compiling CSS","text":"Table of Contents Compiling your CSS on its own ( Gulp ) Installing the preset with Gulp Importing your CSS in Webpack Installing the preset with Webpack Features To compile CSS we leverage PostCSS and a selection of plugins, the final result is a syntax that is almost Sass (SCSS style) with imports, nested styles, variables and more. Compiling your CSS on its own ( Gulp ) The easiest way to get started is to use Gulp to generate your final CSS bundle Installing the preset with Gulp cd src\/main\/frontend npm install @swissquote\/crafty @swissquote\/crafty-preset-postcss @swissquote\/crafty-runner-gulp --save In your crafty.config.js file, you must add the following presets and create a bundle. module.exports = { presets: [ \"@swissquote\/crafty-preset-postcss\", \"@swissquote\/crafty-runner-gulp\" ], css: { app: { runner: \"gulp\", source: \"css\/style.scss\" } } }; You are now ready to run crafty run and compile your CSS source files with PostCSS and Gulp. Read more about crafty-preset-postcss. Importing your CSS in Webpack The other way crafty-preset-postcss works is by adding PostCSS as a loader to Webpack. Allowing you to use import from EcmaScript 2015 for your CSS. Installing the preset with Webpack cd src\/main\/frontend npm install @swissquote\/crafty @swissquote\/crafty-preset-postcss @swissquote\/crafty-runner-webpack --save In your crafty.config.js file, you must add the following presets. module.exports = { presets: [ \"@swissquote\/crafty-preset-postcss\", \"@swissquote\/crafty-runner-webpack\" ], js: { app: { source: \"js\/index.js\", extractCSS: true } } }; The extractCSS option will extract the generated CSS from the JavaScript bundle and into its own CSS file. You can use this preset with one of our presets to TypeScript or JavaScript. You are now ready to run crafty run and compile your CSS source files with PostCSS and Webpack. Read more about crafty-preset-postcss. Features We use more than 30 plugins for our PostCSS preset, including nesting, variables, imports, future CSS features and more. See details in CSS Features.","tags":"","url":"Use_Cases\/Compiling_CSS.html"},{"title":"Compiling JavaScript","text":"Table of Contents Compiling JavaScript for a webapp ( Webpack \/ rollup.js ) Installing the preset with Webpack Compiling JavaScript for a library ( Gulp ) Installing the preset with Gulp Features When compiling JavaScript, you have to know wether you are going to develop in an application or a library. The good news is that Crafty makes it a breeze to switch from one to the other. Compiling JavaScript for a webapp ( Webpack \/ rollup.js ) When developing for a webapp, you wish for all files to be packed into the smallest number of files, because the number of requests that a final application will make are directly related to the performance of that application. Webpack and rollup.js do a great job at optimizing your bundles into the smallest possible package. For this use case, we are going to use Webpack, but they are interchangeable in this example. Installing the preset with Webpack cd src\/main\/frontend npm install @swissquote\/crafty @swissquote\/crafty-preset-babel @swissquote\/crafty-runner-webpack --save In your crafty.config.js file, you must add the following presets and create a bundle. module.exports = { presets: [ \"@swissquote\/crafty-preset-babel\", \"@swissquote\/crafty-runner-webpack\" ], js: { app: { runner: \"webpack\", source: \"js\/index.js\" } } }; You are now ready to run crafty run and compile your JavaScript source files with Webpack. Read more about crafty-preset-babel. You can also know more about Webpack\u2019s features and options Compiling JavaScript for a library ( Gulp ) When developing a library, you can either go the same direction as a webapp and merge all the files into one bundle, or you can keep each source file in a separate compiled file and use them as-is. The advantage of the second approach is that the Tree-Shaking that can be done in the final application is much more efficient if the compiled files stay separate. (Like a component library). This approach is not recommended if you know that the majority of your library will always be used, as we would recommend to use rollup.js in that case. Installing the preset with Gulp cd src\/main\/frontend npm install @swissquote\/crafty @swissquote\/crafty-preset-babel @swissquote\/crafty-runner-gulp --save In your crafty.config.js file, you must add the following presets and create a bundle. You can see that the bundle we created contains a glob as the source, this means that all source files will be compiled separately, and the dependencies between the files won\u2019t be resolved (like Webpack or rollup.js would do). module.exports = { presets: [ \"@swissquote\/crafty-preset-babel\", \"@swissquote\/crafty-runner-gulp\" ], js: { lib: { runner: \"gulp\", source: \"js\/**\/*.js\" } } }; You are now ready to run crafty run and compile your JavaScript source files with Gulp. Read more about crafty-preset-babel. Features By leveraging Babel we are able to use EcmaScript 2015+ and compile to EcmaScript 5. Read more about JavaScript features","tags":"","url":"Use_Cases\/Compiling_JavaScript.html"},{"title":"Compiling TypeScript","text":"Table of Contents Compiling TypeScript for a webapp ( Webpack \/ rollup.js ) Installing the preset with Webpack Compiling TypeScript for a library ( Gulp ) Installing the preset with Gulp Features When compiling TypeScript, like for JavaScript, you have to know wether you are going to develop in an application or a library. The good news is that Crafty makes it a breeze to switch from one to the other. Compiling TypeScript for a webapp ( Webpack \/ rollup.js ) When developing for a webapp, you wish for all files to be packed into the smallest number of files, because the number of requests that a final application will make are directly related to the performance of that application. Webpack and rollup.js do a great job at optimizing your bundles into the smallest possible package. For this use case, we are going to use Webpack, but they are interchangeable in this example. Installing the preset with Webpack cd src\/main\/frontend npm install @swissquote\/crafty @swissquote\/crafty-preset-typescript @swissquote\/crafty-runner-webpack --save In your crafty.config.js file, you must add the following presets and create a bundle. module.exports = { presets: [ \"@swissquote\/crafty-preset-typescript\", \"@swissquote\/crafty-runner-webpack\" ], js: { app: { runner: \"webpack\", source: \"js\/index.ts\" } } }; Then, you can create a tsconfig.json next to crafty.config.js. { \"exclude\": [\"node_modules\", \"node\", \"css\", \"etc\"], \"compilerOptions\": { \"declaration\": true, \"moduleResolution\": \"node\", \"charset\": \"UTF-8\", \"jsx\": \"react\", \"module\": \"esnext\", \/\/ Using an ES6 module with an ES5 target allows to leverage tree shaking \"sourceMap\": true, \"target\": \"es5\", \"lib\": [\"DOM\", \"ES2017\", \"DOM.Iterable\", \"ScriptHost\"] } } You are now ready to run crafty run and compile your TypeScript source files with Webpack. Read more about crafty-preset-typescript. You can also know more about Webpack\u2019s features and options Compiling TypeScript for a library ( Gulp ) When developing a library, you can either go the same direction as a webapp and merge all the files into one bundle, or you can keep each source file in a separate compiled file and use them as-is. The advantage of the second approach is that the Tree-Shaking that can be done in the final application is much more efficient if the compiled files stay separate. (Like a component library). This approach is not recommended if you know that the majority of your library will always be used, as we would recommend to use rollup.js in that case. Installing the preset with Gulp cd src\/main\/frontend npm install @swissquote\/crafty @swissquote\/crafty-preset-typescript @swissquote\/crafty-runner-gulp --save In your crafty.config.js file, you must add the following presets and create a bundle. You can see that the bundle we created contains a glob as the source, this means that all source files will be compiled separately, and the dependencies between the files won\u2019t be resolved (like Webpack or rollup.js would do). module.exports = { presets: [ \"@swissquote\/crafty-preset-typescript\", \"@swissquote\/crafty-runner-gulp\" ], js: { lib: { runner: \"gulp\/typescript\", source: \"js\/**\/*.ts\" } } }; Then, you can create a tsconfig.json next to crafty.config.js. { \"exclude\": [\"node_modules\", \"node\", \"css\", \"etc\"], \"compilerOptions\": { \"declaration\": true, \"moduleResolution\": \"node\", \"charset\": \"UTF-8\", \"jsx\": \"react\", \"module\": \"esnext\", \/\/ Using an ES6 module with an ES5 target allows to leverage tree shaking \"sourceMap\": true, \"target\": \"es5\", \"lib\": [\"DOM\", \"ES2017\", \"DOM.Iterable\", \"ScriptHost\"] } } You are now ready to run crafty run and compile your TypeScript source files with Gulp. Read more about crafty-preset-typescript. Features All features that exist in EcmaScript 2016 are supported in TypeScript. On top of that, TypeScript supports optional typing for each variable, function parameter and return type. Read more about TypeScript specific features","tags":"","url":"Use_Cases\/Compiling_TypeScript.html"},{"title":"Compressing Images","text":"All websites or webapps today have images. We have a preset in Crafty to handle compressing images and SVG\u2019s optimally for your web needs. Installing cd src\/main\/frontend npm install @swissquote\/crafty @swissquote\/crafty-preset-images @swissquote\/crafty-runner-gulp --save In your crafty.config.js file, you must add the following presets module.exports = { presets: [ \"@swissquote\/crafty-preset-images\", \"@swissquote\/crafty-runner-gulp\" ] }; Features Bitmaps (jpg, png, jpg) You can drop your images in any sub-folder of src\/main\/frontend\/images and it will copy it over to the destination folder after applying the best possible compression algorithms to the images SVG There is also an automatic process for SVG that will apply the best possible compression to your svg source file (remove comments and useless spaces) Known issues Downloading jpg\/png\/gif compression tools is done from GitHub directly and fails on machines that don\u2019t have internet access or a corporate proxy. You can use crafty-preset-images-simple instead to work around this issue. Read More","tags":"","url":"Use_Cases\/Compressing_Images.html"},{"title":"Testing your code","text":"Table of Contents Installing Your first test With Babel or Typescript Crafty comes with a crafty test command by default, but no test runner comes built-in. For that we made an integration with Jest. Installing cd src\/main\/frontend npm install @swissquote\/crafty @swissquote\/crafty-preset-jest --save In your crafty.config.js file, you must add the following presets module.exports = { presets: [\"@swissquote\/crafty-preset-jest\"] }; Your first test in js create a file named math.js module.exports.add = function add(a, b) { return a + b; }; module.exports.multiply = function multiply(a, b) { return a * b; }; then in js\/__tests__ create another file named math.js const math = require(\"..\/math\"); test(\"adds 1 + 2 to equal 3\", () =&gt; { expect(math.add(1, 2)).toBe(3); }); test(\"multiply something\", () =&gt; { expect(math.multiply(2, 2)).toBe(4); }); You can now run crafty test and see that the test is discovered and executed automatically. Read more about crafty-preset-jest. With Babel or Typescript You can also use EcmaScript 2015+ and TypeScript features by installing and adding their respective presets. They are configured automatically once you include them in presets from your crafty.config.js","tags":"","url":"Use_Cases\/Testing_your_code.html"},{"title":"User Guides","text":"In this section, we have all user guides, going from what configuration options are available to you to how to improve your productivity with gulp watch. Table of Contents Getting Started Productivity References Getting Started Configuring the build in a blank project Configuring the build in a maven project Create a configuration file Productivity Developing Faster with Crafty watch References Available options in crafty.config.js","tags":"","url":"User_Guides\/index.html"},{"title":"Configuring the build in a blank project","text":"Table of Contents package.json .gitignore Next package.json in package.json add: { \"name\": \"your-project-name\", \"version\": \"1.0.0\", \"scripts\": { \"run\": \"crafty run\", \"watch\": \"crafty watch\" } } .gitignore add this to your .gitignore node_modules\/** This applies to Mercurial as well, but the file name would be .hgignore Next The next step is to add your presets and bundles","tags":"","url":"User_Guides\/Configuring_the_build_in_a_blank_project.html"},{"title":"Configuring the build in a maven project","text":"Table of Contents Update your project\u2019s pom.xml package.json .gitignore Next Update your project\u2019s pom.xml In the &lt;build&gt;&lt;plugins&gt; section, add the following configuration: &lt;!-- Gulp Frontend --&gt; &lt;plugin&gt; &lt;groupId&gt;com.github.eirslett&lt;\/groupId&gt; &lt;artifactId&gt;frontend-maven-plugin&lt;\/artifactId&gt; &lt;version&gt;1.6&lt;\/version&gt; &lt;configuration&gt; &lt;workingDirectory&gt;src\/main\/frontend&lt;\/workingDirectory&gt; &lt;environmentVariables&gt; &lt;!-- Avoid certificates issues, needed behind a corporate proxy --&gt; &lt;NODE_TLS_REJECT_UNAUTHORIZED&gt;0&lt;\/NODE_TLS_REJECT_UNAUTHORIZED&gt; &lt;\/environmentVariables&gt; &lt;\/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;install node and yarn&lt;\/id&gt; &lt;goals&gt; &lt;goal&gt;install-node-and-yarn&lt;\/goal&gt; &lt;\/goals&gt; &lt;configuration&gt; &lt;nodeVersion&gt;v8.9.3&lt;\/nodeVersion&gt; &lt;yarnVersion&gt;v1.3.2&lt;\/yarnVersion&gt; &lt;\/configuration&gt; &lt;\/execution&gt; &lt;execution&gt; &lt;id&gt;yarn install&lt;\/id&gt; &lt;goals&gt; &lt;goal&gt;yarn&lt;\/goal&gt; &lt;\/goals&gt; &lt;configuration&gt; &lt;arguments&gt;install --dist-url=\"${maven-frontend.nodeDownloadRoot}\"&lt;\/arguments&gt; &lt;\/configuration&gt; &lt;\/execution&gt; &lt;execution&gt; &lt;id&gt;yarn build&lt;\/id&gt; &lt;goals&gt; &lt;goal&gt;yarn&lt;\/goal&gt; &lt;\/goals&gt; &lt;configuration&gt; &lt;arguments&gt;run build&lt;\/arguments&gt; &lt;\/configuration&gt; &lt;\/execution&gt; &lt;\/executions&gt; &lt;\/plugin&gt; &lt;!-- End Gulp Frontend --&gt; As you can see, we prefer to use Yarn in this configuration as it\u2019s faster than NPM. Both are are interchangeable in that matter, you can choose the one you prefer. package.json in src\/main\/frontend\/package.json add: { \"name\": \"maven-frontend\", \"version\": \"1.0.0\", \"scripts\": { \"run\": \"crafty run\", \"watch\": \"crafty watch\" } } .gitignore add this to your .gitignore # Frontend plugins src\/main\/frontend\/node\/** src\/main\/frontend\/node_modules\/** This applies to Mercurial as well, but the file name would be .hgignore Next The next step is to add your presets and bundles","tags":"","url":"User_Guides\/Configuring_the_build_in_a_maven_project.html"},{"title":"Create a configuration file","text":"In this guide you will learn to create a configuration for your project. Table of Contents Foreword Presets Bundles Common Bundle options CSS Bundles (crafty-preset-postcss) JavaScript Bundles (crafty-preset-babel or crafty-preset-typescript) Images (crafty-preset-images or crafty-preset-images-simple) Naming and locations conventions Locations Bundle names Bundle destinations Destination directory All Options Foreword All Paths are relative to the current working directory. Maven projects default to src\/main\/frontend. Your configuration file must be in crafty.config.js In its simplest form a configuration can look like this. module.exports = { presets: [ \"@swissquote\/crafty-preset-babel\", \"@swissquote\/crafty-runner-gulp\" ], js: { app: { \/\/ Will create js\/app.min.js containing both source files source: [\"js\/panel.js\", \"js\/nothing.js\"] } } }; More advanced configuration can look like this: module.exports = { presets: [ \"@swissquote\/crafty-preset-maven\", \"@swissquote\/crafty-preset-postcss\", \"@swissquote\/crafty-preset-babel\", \"@swissquote\/crafty-runner-gulp\", \"@swissquote\/crafty-runner-webpack\" ], name: \"test-plugin\", mavenType: \"webjar\", \/\/ This artifact is a webjar css: { testIndex: { source: \"css\/test.scss\", \/\/ You can specify one or more entry files destination: \"index.min.css\", \/\/ You can make the destination explicit watch: \"css\/**\/*.scss\" \/\/ When a change occurs on files corresponding to this patterns this task will be rerun }, testIndex2: { source: [\"css\/test2.scss\", \"css\/more.scss\"], destination: \"index2.min.css\", watch: \"css\/**\/*.scss\" } }, js: { app: { runner: \"webpack\", \/\/ Use Webpack and Babel to compile this bundle source: \"js\/app.js\" } } }; Presets Each feature of Crafty is declared through a preset, if you wish to compile your JavaScript with Babel, we created crafty-preset-babel. If you wish to compile your CSS with PostCSS, we created crafty-preset-postcss. All these presets can create Tasks which are then taken by a Runner. We provide three runners: crafty-runner-gulp, crafty-runner-webpack and crafty-runner-rollup. Bundles A bundle is a set of one or more source files that will be compiled in a single destination file. Each bundle has one mandatory option : source. If we take this JavaScript bundle : app: { \/\/ name of the bundle source: ['js\/panel.js', 'js\/nothing.js'], } This will automatically create a file in &lt;destination_js&gt;\/app.min.js containing both source files that will be minified. The file name is taken from the bundle name if no destination is specified Common Bundle options Option Type Optional ? Description source String\/Array No One single file or an array of files you wish to compile. Glob expressions are valid. runner String No The name of the runner to use for this bundle. Is mandatory if more than one runner is loaded destination String Yes The name to give to the final file. Defaults to &lt;bundle_name&gt;.min.&lt;bundle_type&gt; watch String\/Array Yes The watch expression to use to rebuild this asset. Any glob expression is valid, is needed for Gulp in watch mode. Bundles have more options that are specific to the selected runners and bundle types. CSS Bundles (crafty-preset-postcss) testIndex: { source: 'css\/test\/test.scss', destination: 'index.min.css', watch: 'css\/test\/**.scss' } testIndex is the bundle name, you will be able to call crafty css_testIndex to build it. The preset itself documents all options and features that are available to you. More about crafty-preset-postcss JavaScript Bundles (crafty-preset-babel or crafty-preset-typescript) app: { source: ['js\/panel.js', 'js\/nothing.js'], destination: 'app.min.js' } app is the bundle name, you will be able to call crafty run js_app to build it. Apart from the common options, here are the options you can use for JavaScript bundles. The presets document all options and features that are available to you. More about crafty-preset-babel More about crafty-preset-typescript Images (crafty-preset-images or crafty-preset-images-simple) You can add the crafty-preset-images or crafty-preset-images-simple package to your project to be able to compress your jpg, png, gif and svg files (images-simple will compress svg and copy the rest). More about crafty-preset-images More about crafty-preset-images-simple Naming and locations conventions Locations Your assets can be located anywhere you want next to your package.json and crafty.config.js but we recommend putting them inside a sub-directory: js for JavaScript \/ TypeScript files css for Style sheets images for images If you have some external JavaScript or CSS that aren\u2019t available in NPM. You can also use create a vendor directory either in the js\/css folder or in frontend if your libraries contains both JavaScript and CSS files. Bundle names Your bundle names should have an expressive name, if you have a single bundle, name it either \u201capp\u201d or the name of your application. Bundle destinations When setting a destination, you should always prefix the extension with \u201c.min\u201d for example file.min.js or file.min.css This is a convention that allows some tools to know the content is minified. And will bring you the following benefits : When compressing files together, a file with \u201c.min\u201d in the name will not be minified again, thus you get a performance boost. Files with \u201c.min\u201d in their names won\u2019t go through the linting hooks. Destination directory By default, your compiled assets will be in dist\/&lt;bundleType&gt;. But you can override the config.destination or config.destination_&lt;bundleType&gt; option. You can also use the crafty-preset-maven with the mavenType option to move your assets to Maven\u2019s target directory. More about crafty-preset-maven All Options Crafty has options that can be tweaked, the exhaustive documentation is available here.","tags":"","url":"User_Guides\/Create_a_configuration_file.html"},{"title":"Autofix Resources","text":"Table of Contents What is this? When should you use it ? Option 1 : Crafty jsLint, cssLint options Option 2 : use Prettier directly What is this? In this guide we provide some simple examples for the usage of the auto-fix functionality. Crafty comes with some default linter configuration including among other ESLint (JavaScript) PostCSS (CSS) Prettier (JavaScript + CSS) When should you use it ? When your build produces a lot of errors, you might want to automate the task of fixing the errors. Some of them need to be fixed manually but most can be fixed automatically. Before diving into fixing 100 lines of code try these commands they come in handy. Option 1 : Crafty jsLint, cssLint options This command will lint all your JavaScript files inside the src folder. crafty jsLint src\/** --fix --preset recommended This command will lint all your CSS files inside your src folder. crafty cssLint src\/** --fix --preset recommended More info for crafty ESLint options here: crafty-preset-eslint More info for crafty PostCSS options here: crafty-preset-postcss Option 2 : use Prettier directly Before running yarn prettier you should run yarn crafty ide More information IDE Integration This command will generate prettier configuration for your project. Prettier is used internally with Crafty, you can also use Prettier directly to fix the formatting of your files without the linting: npx prettier --write \"**\/*.js\" npx prettier --write \"**\/*.ts\" \"**\/*.tsx\" Note the --write option will write the changes to disk. Omitting it will allow you to have a preview of the changes. Example for linting TypeScript files: npx prettier --write \"**\/*.ts\" \"**\/*.tsx\" More options here: Prettier Configuration","tags":"","url":"User_Guides\/Autofix_Resources.html"},{"title":"crafty.config.js Available Options","text":"Table of Contents All Options destination browser: Browser compatibility terser : JavaScript compression stylelint_pattern: Which files to lint Bundles Common Bundle options CSS Bundles JavaScript Bundles JavaScript External assets All Options All the options in crafty.config.js apart from your bundles in the js and css bundles are optional. Option Default Value Description Preset browsers See below The browser compatibility we wish in the compiled files. Read more below Core destination See below The destination at which to put all files Core destination_&lt;bundleType&gt; destination + &quot;\/&quot; + bundleType The destination for JavaScript\/TypeScript files Core eslint Swissquote JavaScript Guideline This defines the rules for all JavaScript source files that go through the Gulp builder crafty-preset-babel externals [] What libraries are already provided in the final application, see below for more information crafty-runner-rollup \/ crafty-runner-webpack img_basedir &quot;images&quot; Where to take images from (Relative to current working directory) crafty-preset-images \/ crafty-preset-images-simple img_extensions [&quot;png&quot;, &quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;] What extensions to compress (excludes svg) crafty-preset-images legacy_css false When enabling this feature, the CSS will be linted for errors and formatting instead of the Swissquote CSS Guideline crafty-preset-postcss mavenType See below Defines wether this application is a webapp or webjar. crafty-preset-maven stylelint Swissquote CSS Guideline This defines the rules for all CSS source files, it contains the naming conventions crafty-preset-postcss stylelint_legacy Swissquote CSS Guideline This defines the rules for all CSS source files, it contains the base formatting rules and best practices crafty-preset-postcss stylelint_pattern See Below Define the file types you want to target when linting CSS files. crafty-preset-postcss terser See below Configure the compression level of your JavaScript assets. crafty-preset-terser destination By default, your compiled assets will be in dist\/&lt;bundleType&gt;. But you can override the config.destination or config.destination_&lt;bundleType&gt; option. You can also use the crafty-preset-maven with the mavenType option to move your assets to Maven\u2019s target directory. More about crafty-preset-maven browser: Browser compatibility Default: &gt; 0.25%, Edge &gt;= 17, Safari &gt;= 11, iOS &gt;= 11, Chrome &gt;= 66, Firefox &gt;= 60, IE &gt;= 11, not op_mini all Depending on the target browsers, some optimization might be enabled or disabled to create the smallest possible package for the browsers requirements we have. This option is for example used by Autoprefixer to define which CSS Prefixes it needs to add to the CSS file. The default browsers we defined was taken from the statistics of browser usage we have seen across all Swissquote Platforms If you want a different list, you can override those defaults using any valid Browserslist query source terser : JavaScript compression Default: { compress: true, sourceMap: true } By default, we compress our JavaScript with safe parameters, if you wish you can go further and enable more advanced compression techniques. The options are described in Terser\u2019s documentation stylelint_pattern: Which files to lint Default: [&quot;css\/**\/*.scss&quot;, &quot;css\/**\/*.css&quot;, &quot;!*.min.css&quot;, &quot;!**\/vendor\/**\/*.scss&quot;, &quot;!**\/vendor\/**\/*.css&quot;, &quot;!**\/vendor\/*.scss&quot;, &quot;!**\/vendor\/*.css&quot;] Define the file types you want to target when linting CSS files. Bundles A bundle is a set of one or more source files that will be compiled in on or more destination files. Each bundle has one mandatory option : source. If we take this JavaScript bundle : app: { \/\/ name of the bundle source: ['js\/panel.js', 'js\/nothing.js'], } This will automatically create a file in &lt;destination_js&gt;\/app.min.js containing both source files that will be minified. The file name is taken from the bundle name if no destination is specified Common Bundle options Option Type Optional ? Description source String\/Array No One single file or an array of files you wish to compile. Glob expressions are valid. runner String No The name of the runner to use for this bundle. Is mandatory if more than one runner is loaded destination String Yes The name to give to the final file. Defaults to &lt;bundle_name&gt;.min.&lt;bundle_type&gt; watch String\/Array Yes The watch expression to use to rebuild this asset. Any glob expression is valid, is needed for Gulp in watch mode. CSS Bundles testIndex: { source: 'css\/test\/test.scss', destination: 'index.min.css', watch: 'css\/test\/**.scss' } testIndex is the bundle name, you will be able to call gulp css_testIndex to build it. Apart from the common options, here are the options you can use for CSS bundles. Option Type Runner Preset Description extractCSS Boolean \/ String \/ Object Webpack crafty-preset-postcss This will extract the CSS out of the bundle, all Official options work, you can also pass true which will use [bundle]-[name].min.css as file name, you can use [bundle] in the file name which is replaced by your bundle name. JavaScript Bundles app: { source: ['js\/panel.js', 'js\/nothing.js'], destination: 'app.min.js' } app is the bundle name, you will be able to call gulp js_app to build it. Apart from the common options, here are the options you can use for JavaScript bundles. Option Type Runner Preset Description format String rollup.js crafty-runner-rollup Define the output format can be any of amd, iife, cjs, es or umd. Defaults to es. externals Array&lt;String&gt; rollup.js \/ Webpack crafty-runner-webpack \/ crafty-runner-rollup Extends the list of provided libraries (Webpack understands both globs and strings, rollup.js doesn\u2019t understand globs) hot Boolean Webpack crafty-runner-webpack Allows to use Hot Module Replacement in watch mode (false by default) libraryTarget String Webpack crafty-runner-webpack Define the library type to export. By default we use amd. Possible values library String Webpack crafty-runner-webpack Define the library name for the Webpack module or export. concat Boolean Gulp crafty-preset-babel This will merge all files together, outputting a single file. (This doesn\u2019t resolve imports, use Webpack or rollup.js for this) JavaScript External assets By default, all bundlers include all external dependencies in the final bundle, this works fine for applications, but if you wish to build a multi-tenant application or a library, you don\u2019t wish to include all dependencies, because you\u2019ll end up with the same dependency more than one time. The externals option allows you to define a list of libraries that are provided and should not be embedded in the build, here is an example : module.exports = { ... \/\/ patterns are strings or globs externals: [\"react\", \"react-dom\", \"squp\", \"squp\/**\"], ... js: { app: { \/\/ You can provide more items here, they will be merged with the main list for this bundle externals: [\"my-plugin\", \"my-plugin\/**\"] ... } } ... } In this example react, react-dom and all modules starting with squp\/ will be treated as external You can see that globs were used here, note that they work for Webpack but not for rollup.js that needs complete strings.","tags":"","url":"User_Guides\/crafty.config.js_Available_Options.html"},{"title":"Developing Faster with Crafty watch","text":"Once npm install was executed, you can either do crafty run or crafty watch While developing, prefer crafty watch This will run Crafty in watch mode, in this mode, each change you make to your files will be detected and the relevant assets will be compiled. This works with the following : A change in a CSS file A change in a JavaScript or TypeScript file Adding or replacing images in any runner (Gulp, Webpack and rollup.js) It\u2019s strongly recommended to let it run in the background in your IDE while you\u2019re developing, it streamlines the process a lot ! Hot Module Replacement Hot Module Replacement allows to change the JavaScript on the page without reloading it. We provide a documentation on how to get started in a React application. Read more here","tags":"","url":"User_Guides\/Developing_Faster_with_Crafty_watch.html"},{"title":"Packages","text":"Crafty is composed of small packages and can be used separately. Here is an overview of their features. Table of Contents crafty Runners crafty-runner-webpack crafty-runner-gulp Presets crafty-preset-babel crafty-preset-postcss crafty-preset-typescript crafty-preset-images crafty-preset-images-simple crafty-preset-maven crafty-preset-react Test runners crafty-preset-jest Utility packages babel-preset-swissquote eslint-plugin-swissquote postcss-swissquote-preset stylelint-config-swissquote crafty Command runner, this is the package that allows all other packages to run. crafty --preset crafty-preset-babel jsLint presets\/* --preset recommended --preset node Also automatically reads your crafty.config.js (in the current working directory) and loads those presets as well. Runners crafty-runner-webpack Use this runner to bundle your code with Webpack. Features and options crafty-runner-gulp Use this runner to be able to create Gulp tasks in your projects. Features and options Presets crafty-preset-babel This preset provides EcmaScript 2015+ support with Babel for the Gulp, Webpack and rollup.js runners. It also configures ESLint with our linting rules. Both in the runners and as a separate command. Features and options crafty-preset-postcss Compile your CSS using PostCSS, works with Webpack and Gulp. Features and options crafty-preset-typescript This preset provides TypeScript support for the Gulp, Webpack and rollup.js runners. It also configures ESLint with our linting rules Features and options crafty-preset-images This preset leverages Gulp to compress your SVG\/PNG\/JPG\/GIF files and placing them in the destination folder. Features and options crafty-preset-images-simple In some cases, you might not have an internet connection on your build machine. As the tools to compress PNG\/JPG\/GIF need to be downloaded from GitHub, this preset will copy the files instead of copying them. SVG is also compressed with this preset. It works as a drop-in replacement for crafty-preset-images. Features and options crafty-preset-maven If your code is inside a Maven project, this preset overrides the destination to move your compiled assets to the right directory in target Features and options crafty-preset-react A preset that provides utilities for Jest and Hot Module Replacement in React projects. JSX Compilation is handled by the crafty-preset-babel already. Features and options Test runners crafty-preset-jest This preset will add Jest to the crafty test command. Its usage with the Babel and TypeScript preset allows you to test your EcmaScript 2015+ and TypeScript code effortlessly. Features and options Utility packages babel-preset-swissquote A Babel preset that supports EcmaScript 2015+, React and more Features and options eslint-plugin-swissquote An ESLint plugin that contains all our recommended options and plugins. Features and presets postcss-swissquote-preset All PostCSS plugins used in the Crafty styles preset are defined in this package. Features and presets stylelint-config-swissquote Stylelint linting rules following the Swissquote CSS Guideline. Provides some custom Stylelint rules. Features and presets","tags":"","url":"Packages\/index.html"},{"title":"crafty","text":"Description crafty is the core package of Crafty, it gives the foundations to load presets and execute the tasks and commands created by them. Crafty comes with three default commands, reads one configuration file and loads presets. All the rest is handled by presets. The philosophy Crafty\u2019s philosophy is that there are great build and automation tools out there, we don\u2019t want to reinvent them. Gulp is awesome to create tasks and streams of work, Webpack is great at creating bundles, PostCSS and its plugin ecosystem is big. But what plugins and loaders should we use for our needs ? Crafty\u2019s philosophy is that if you wish to use Gulp and Webpack together, it should be easy. If you want to use TypeScript instead of Babel, it should be a single configuration line change. The default configuration should allow you to get started in a couple of minutes, but you should be able to fine-tune the configuration to your needs. Another aspect is that configuring your build process once is one thing, keeping it up-to-date is more complicated. Does a new major version of PostCSS work with my existing plugins ? Does this minor update introduce a breaking change by mistake ? Crafty takes care of that heavy lifting and helps you keep your package.json small. What\u2019s inside Bundles In Crafty, a bundle is a piece of configuration that represents one or more source files and one destination file. (In some cases, more than one destination file.) Each bundle has to be treated by a runner. Runners A runner\u2019s purpose is to take a bundle and turn it into a task that will then take your files and compile them. Each runner can be augmented with presets. Presets Presets are a way to extend Crafty\u2019s capabilities with new tasks, commands, runners and configuration. Each preset can use any number of extension points (functions) that will be executed by crafty or other presets. We have an extension point that can override the configuration, an extension point to add Babel plugins (provided by the Babel preset) and more. Read more about the anatomy of a preset Existing runners and presets crafty-runner-webpack Use this runner to bundle your code with Webpack. crafty-runner-gulp Use this runner to be able to create Gulp tasks in your projects. crafty-preset-babel EcmaScript 2015+ support with Babel and ESLint with our linting rules. crafty-preset-postcss Compile your CSS using PostCSS, works with Webpack and Gulp. crafty-preset-typescript This preset provides TypeScript support and configures ESLint with our linting rules. crafty-preset-images This preset compresses your SVG\/PNG\/JPG\/GIF files. crafty-preset-images-simple If you are behind a corporate proxy, this preset will copy images without compressing them. crafty-preset-maven This preset overrides the destination to move your compiled assets to the right directory in target of your Maven project. crafty-preset-react A preset that provides default configuration when using React in a project. JSX Compilation is handled by the crafty-preset-babel already (Not Ready) crafty-preset-jest This preset will add Jest to the crafty test command, works with Babel and TypeScript.","tags":"","url":"Packages\/crafty\/index.html"},{"title":"Anatomy of a preset","text":"Defining a preset A preset is defined with the following functions. All methods are optional; Use the methods you need, leave out the rest. interface CLIInputs { input: string[]; flags: {[key: string]: string} } module.exports = { \/** * Provide some default configuration along with the preset. * * @return A partial configuration, that will be recursively merged in the existing configuration *\/ defaultConfig(): {[key: string]: string} { return {} } \/** * Change the configuration once the user overrides have been applied. * * (Renaming legacy parameters, validating or sanitizing values, etc...) can be done here * * @param config The original configuration * @return The full configuration *\/ config(config: {[key: string]: string}): {[key: string]: string} { return config; } \/** * Prepares the commands that can be invoked in this preset. * * @param crafty The Crafty instance * @return an object with command names as key, and an object with \"command\" and \"description\" as keys *\/ commands(crafty: Crafty): {[command: string]: {command: (crafty: Crafty, input: string, cli: CLIInputs) =&gt; Promise&lt;number&gt;, description: string}} { return {} } \/** * This extension point is called when the configuration is complete, you can use this if you need to initialize something that will be needed later by your preset * * @param crafty The Crafty instance *\/ init(crafty: Crafty): void \/** * This extension point allows to transform a bundle into a task, any preset can define one or more bundle creators * * @param crafty The Crafty instance *\/ bundleCreator(crafty: Crafty): { [bundleType: string]: { [runnerName: string]: (crafty: Crafty, bundle: Bundle) =&gt; void } } \/** * This extension point is called when tasks will be executed (listing, running or watching). * Use it to declare your tasks and watchers that aren't related to bundles. * * @param crafty The Crafty instance *\/ tasks(crafty: Crafty): void \/** * This extension point is called when `crafty test` is executed, you can run your test runner and return with a Promise. * * @param crafty The Crafty instance * @param input The input to the command * @param cli The arguments passed to the CLI, allows to query for options and parameters * @returns a promise that fail if the test fail. *\/ test(crafty: Crafty, input: string, cli: CLIInputs): Promise \/\/ Presets add more extensions points \/\/ babel \/\/ jest \/\/ gulp \/\/ rollup \/\/ webpack } Defining a bundleCreator Bundles can contain those fields by default, each bundleType can add more fields. interface Bundle { \/** * The bundle name, is the key you specify next to the object in `crafty.config.js` *\/ name: string; \/** * The bundle's type, generally `js` or `css`, you can also create your own types. *\/ type: string; \/** * The task name to use when you generate the task, is made of `&lt;bundle.type&gt;_&lt;bundle.name&gt;` *\/ taskName: string; \/** * One single file or an array of files you wish to compile. Glob expressions are valid. *\/ source: string | string[]; \/* * The name to give to the final file. Defaults to `&lt;bundle_name&gt;.min.&lt;bundle_type&gt;` *\/ destintion: string; \/* * The name of the runner to use for this bundle. Is mandatory if more than one runner is loaded *\/ runner?: string; \/* * The watch expression to use to rebuild this asset. * Any glob expression is valid, is needed for Gulp in watch mode. * Webpack and rollup.js have their own mechanism to watch files and don't need this option. * If nothing is specified, it will use the value of `source` as a watch expression *\/ watch?: string | string[]; } A bundle creator is a function that receives a crafty instance and a bundle, and is supposed to create a task and a watcher. An example : bundleCreator(crafty: crafty): { js: { \"gulp\/babel\": (crafty: Crafty, bundle: Bundle) =&gt; { crafty.undertaker.task(bundle.taskName, () =&gt; { \/\/ Run your task Promise.resolve(); })); crafty.watcher.add(bundle.watch || bundle.source, bundle.taskName); } } } In this example, you can see that this bundleCreator is meant for the js bundleType, and will be used if you specify gulp or gulp\/babel as runner. You can also see that a watcher is created, so if the bundle.watch pattern is matched, bundle.taskName is executed. Defining a command Commands receive three parameters: a Crafty instance, the command input and the parsed arguments used in the CLI. \/** * @param crafty The Crafty instance * @param input The input to the command * @param cli The arguments passed to the CLI, allows to query for options and parameters * @returns a promise that resolves with 0 if everything went well or rejects with a non 0 exit code *\/ function command( crafty: Crafty, input: string, cli: CLIInputs ): Promise&lt;number&gt; { return Promise.resolve(0); } The Crafty instance The Crafty instance that is passed around contains all the configuration, commands and tasks generated. Check out it\u2019s API","tags":"","url":"Packages\/crafty\/Anatomy_of_a_preset.html"},{"title":"The Crafty instance","text":"Table of Contents Crafty Logging Undertaker: the task repository Watcher Crafty class Crafty { \/** * Crafty's configuration object. All presets can add their values to it. *\/ config: {}; \/** * Log information, with a timestamp. * See below for more *\/ log: FancyLog; \/** * Task repository, taken from Gulp 4 * See below for more *\/ undertaker: Undertaker; \/** * Add watchers * See below for more *\/ watcher: Watcher; \/** * Format and log an error. *\/ error(error: Error) {} \/** * Add a task to the default run, will then be executed on `crafty run default` or `crafty run` *\/ addDefaultTask(task: string) {} \/** * Are we in watch mode right now ? * If the parameter is specified, will enable or disable watch mode. *\/ isWatching(enable?: boolean) {} \/** * Get the current environment *\/ getEnvironment() {} \/** * Get the implementations of a method from all presets *\/ getImplementations(method: string) {} \/** * Get the current loglevel * * 1: normal * 2: verbose * 3: debug *\/ get loglevel(); \/** * Load the tasks *\/ createTasks(); } Logging class FancyLog { (...msg: any): void, error: (...msg: any) =&gt; void, warn: (...msg: any) =&gt; void, info: (...msg: any) =&gt; void, dir: (...msg: any) =&gt; void, } crafty.log(\"Some\", \"logging\", \"message\"); crafty.log.info(\"You should know this\"); Official documentation Undertaker: the task repository crafty.undertaker.task(\"task1\", () =&gt; { return new Promise((resolve, reject) =&gt; { resolve(); \/\/ when everything is done }); }); crafty.undertaker.task(\"combined\", crafty.undertaker.series(\"task1\", \"task1\")); crafty.undertaker.task(\"all\", crafty.undertaker.parallel(\"combined\", \"task1\")); Official documentation Watcher class Watcher { add(regex: RegExp, task: string) {} addRaw(runner: { start: () =&gt; void }) {} run() {} }","tags":"","url":"Packages\/crafty\/The_Crafty_instance.html"},{"title":"crafty-runner-gulp","text":"Description \u201cAutomate and enhance your workflow\u201d This is how Gulp presents itself, Gulp is a task runner, combined with an API of file streams. This runner is based on Gulp 4. Table of Contents Description Features Adding Gulp tasks Slight change in behavior of gulp.watch() StreamHandler new StreamHandler(source, destination[, errorCallback]) stream.add(handler) generate() Features Create any gulp task Combine tasks in parallel or in series Create file watchers that run tasks or anything else on change. Adding Gulp tasks module.exports = { \/** * Represents the extension point for rollup configuration * @param {Crafty} crafty - The instance of Crafty. * @param {Gulp} gulp - The instance of Gulp. * @param {StreamHandler} StreamHandler - A wrapper to create your tasks. *\/ gulp(crafty, gulp, StreamHandler) { \/\/ Create tasks gulp.task(\"images_svg\", function() { const stream = new StreamHandler(\"images\/**\/*.svg\", \"dist\/images\"); stream.add(svgmin()); return stream.generate(); }); \/\/ Group tasks into other tasks gulp.task(\"images\", gulp.parallel(\"images_svg\")); \/\/ Register this task to run automatically crafty.addDefaultTask(\"images\"); \/\/ Create custom watchers gulp.watch([\"js\/*.js\"]).on(\"change\", function(path) { console.log(\"Change happened to\", path); }); } }; The full API of Gulp is supported Slight change in behavior of gulp.watch() We changed the behavior of gulp.watch() in Crafty compared to how it works in Gulp: Instead of watching directly, the watch will start when running crafty watch. This creates a clear separation between development and production builds. StreamHandler StreamHandler is a utility class to help you create your streams. It works the same way as gulp.src()...pipe(gulp.dest()) but with some added syntactic sugar: Doesn\u2019t return a new instance on every pipe thus allowing you to create complex streams without re-assigning the variable every time Includes gulp-plumber to catch errors gulp.task(\"images_svg\", function() { const stream = new StreamHandler(\"images\/**\/*.svg\", \"dist\/images\"); stream.add(svgmin()); return stream.generate(); }); new StreamHandler(source, destination[, errorCallback]) source is a glob or array of globs destination is a destination file or directory errorCallback is an optional callback that you can set to define what to do with errors in your stream stream.add(handler) Same as .pipe(handler) generate() Generates the stream and returns it.","tags":"","url":"Packages\/crafty_runner_gulp.html"},{"title":"crafty-runner-rollup","text":"Description rollup.js is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application. rollup.js works well with libraries because it\u2019s able to output files with EcmaScript 2015 exports which allow for advanced tree shaking. The rollup.js integration is experimental and has some issues that are known and some that are not pinpointed yet. Table of Contents Description Features Options Bundle Options inlineRuntime \/ put @babel\/runtime inline or keep it as imports Extending the configuration Adding \/ modifying plugins Known issues Features Bundle your JavaScript using EcmaScript 2015 imports or commonjs imports Your code is Uglified after compilation. Configurable output formats Watch mode, re-compiles your files on changes Options We don\u2019t provide any option to configure rollup.js outside bundles, but as crafty.config.js is considered as a preset, you can define the rollup override method in your configuration file and change the configuration to your needs. Check the Extending the configuration section below for more information on that. Bundle Options The rollup.js preset is compatible with our Babel and TypeScript Option Type Optional ? Description format string Yes Define the output format can be any of amd, iife, cjs, es or umd. Defaults to es. externals string[] Yes Extends the list of provided libraries (Webpack understands both globs and strings, rollup.js doesn\u2019t understand globs) inlineRuntime boolean Yes Do we inline the @babel\/runtime ? Read below for details and implication inlineRuntime \/ put @babel\/runtime inline or keep it as imports Default: true when nothing is specified, and to false when a dependency to @babel\/runtime is found. When compiling newer EcmaScript to older versions, some helper functions can be needed to make it work. For example functions to create classes, rest, spread, etc\u2026 These helpers are quite small, however, if you are creating a library which will be included in another project, your bundle might end up containing the library along with the copies that the final project will contain as well. A way to reduce this cost is instead of having these helpers inline is to keep them as imports. \/\/ This function _classCallCheck(instance, Constructor) { \/* *\/ } function _defineProperties(target, props) { \/* *\/ } function _createClass(Constructor, protoProps, staticProps) { \/* *\/ } \/\/ Becomes import _classCallCheck from \"@babel\/runtime\/helpers\/classCallCheck\"; import _createClass from \"@babel\/runtime\/helpers\/createClass\"; The way to do this is by adding a dependency to @babel\/runtime in your project\u2019s package.json. If for some reason you need a dependency to @babel\/runtime but still wish helpers to be inline, you can force it with inlineRuntime: true. Extending the configuration Each preset and crafty.config.js can define the rollup(crafty, bundle, rollupConfig) function to override rollup.js\u2019 configuration. module.exports = { \/** * Represents the extension point for rollup.js configuration * @param {Crafty} crafty - The instance of Crafty. * @param {Object} bundle - The bundle that is being prepared for build (name, input, source, destination) * @param {Object} rollupConfig - The current rollup.js configuration (input, output, watch) *\/ rollup(crafty, bundle, rollupConfig) { \/\/ Mutate any of rollupConfig.input, rollupConfig.output or rollupConfig.watch to your liking } }; The full list of available configuration option is available on the official website. The difference with the official configuration is how plugins are handled. The section below explains how plugins are configured. Adding \/ modifying plugins In rollup.js, plugins are functions that are called with their options. As we want to be able to override those options during the preparation phase of the runner, those plugins are presented in the following way : Here is an example of how the rollup-plugin-eslint is integrated into rollup.js . const rollupEslint = require(\"rollup-plugin-eslint\"); module.exports = { \/** * Represents the extension point for rollup configuration * @param {Crafty} crafty - The instance of Crafty. * @param {Object} bundle - The bundle that is being prepared for build (name, input, source, destination) * @param {string} rollupConfig - The current rollup configuration (input, output, watch) *\/ rollup(crafty, bundle, rollupConfig) { \/\/ rollupConfig.input.plugins is an object during preparation phase with four possible keys : \/\/ - plugin : the function to initialize the plugin \/\/ - options : A configuration object, will be passed to the function as a first parameter upon initialization \/\/ - weight : (optional) The weight of the plugin, used to define the order in which the plugins are run (A weight of 0 is applied if this key is omitted) \/\/ - init : (optional) A function that Returns an instance of the plugin. The default is : `(plugin) =&gt; plugin.plugin(plugin.options)` rollupConfig.input.plugins.eslint = { plugin: rollupEslint, weight: -20, options: { ...crafty.config.eslint, throwOnError: crafty.getEnvironment() === \"production\", exclude: [\"node_modules\/**\"], include: [\"**\/*.js\", \"**\/*.jsx\"] } }; } }; Known issues If you have two bundles that run with rollup.js, if one fails, the second one stops as well. ESLint stops linting after the first file in error, this shouldn\u2019t be the case.","tags":"","url":"Packages\/crafty_runner_rollup.html"},{"title":"crafty-runner-webpack","text":"Description Webpack is an asset bundler, its purpose is to compile your JavaScript code to be the most efficient possible for production. Table of Contents Description Features Configuration Options Bundle Options Extending the configuration webpack.config.js webpack(crafty, bundle, chain) Features Bundle your JavaScript using EcmaScript 2015 imports or commonjs imports Your code is Uglified after compilation. Configurable output formats Watch mode, re-compiles your files on changes Profile your bundles with --profile which will create a profile next to the generated JavaScript Configuration Options We don\u2019t provide any option to configure Webpack outside bundles, but as crafty.config.js is considered as a preset, you can define the webpack override method in your configuration file and change the configuration to your needs. Check the Extending the configuration section below for more information on that. Bundle Options Option Type Optional ? Runner Description hot Boolean Yes Webpack Allows to use Hot Module Replacement in watch mode (false by default) libraryTarget String Yes Webpack Define the library type to export. By default we use amd. Possible values library String Yes Webpack Define the library name for the Webpack module or export. externals Array&lt;String&gt; Yes Webpack \/ rollup.js Extends the list of provided libraries (Webpack understands both globs and strings, rollup.js doesn\u2019t understand globs) Extending the configuration Extending Webpack\u2019s configuration can be done in two different way, either with a webpack.config.js file or with the webpack extension point webpack.config.js In this solution, you have to create a webpack.config.js file next to your package.json. This file should contain the configuration you wish to change, the rest being already configured inside Crafty we will merge your custom settings. This solution is a bit less powerful than the extension point: You can replace configuration but you can\u2019t remove loaders and you can\u2019t change the loader\u2019s configuration. webpack(crafty, bundle, chain) Each preset and crafty.config.js can define the webpack(crafty, bundle, chain) function to override rollup.js\u2019 configuration. Webpack\u2019s configuration is built using webpack-chain which is a configuration builder. module.exports = { \/** * Represents the extension point for Webpack configuration * @param {Crafty} crafty - The instance of Crafty. * @param {Object} bundle - The bundle that is being prepared for build (name, input, source, destination) * @param {WebpackChain} chain - The current Webpack configuration using `webpack-chain` *\/ webpack(crafty, bundle, chain) { \/\/ Change any value of the chain object \/\/ For example, adding supported extensions to the resolution chain.resolve.extensions.add(\".ts\").add(\".tsx\"); } };","tags":"","url":"Packages\/crafty_runner_webpack.html"},{"title":"crafty-preset-babel","text":"Compatible Runners Gulp rollup.js Webpack Test Runners Jest Table of Contents Description Features Linting Installation Usage With Webpack \/ rollup.js JavaScript External assets With Gulp Usage with Jest Configuration Bundle options Adding Babel plugins and presets Description Babel is the leading tool to compile EcmaScript 2015+ to EcmaScript 5, combined with ESLint to lint your code, you get the best preset to get started. Features @swissquote\/crafty-preset-babel is able to configure Babel with Webpack and rollup.js. This preset also supports Gulp but in this case it concatenates and minifies the files, it doesn\u2019t resolve imports. Our Babel preset Read more Linting In @swissquote\/crafty-preset-babel JavaScript is linted with ESLint, a powerful linter that supports plugins, our configuration follows the Swissquote JavaScript Guideline through our @swissquote\/crafty-preset-eslint preset. Read more Installation npm install @swissquote\/crafty-preset-babel --save module.exports = { presets: [ \"@swissquote\/crafty-preset-babel\", \"@swissquote\/crafty-runner-webpack\", \/\/ optional \"@swissquote\/crafty-runner-gulp\" \/\/ optional ], js: { app: { runner: \"webpack\", \/\/ Webpack, Gulp or rollup.js (optional if you have a single runner defined) source: \"js\/app.js\" } } }; Usage With Webpack \/ rollup.js Both runners have the same features in regards to Babel support. They will resolve your modules recursively and bundle them in one file or more if you do some code-splitting. JavaScript External assets By default, all bundlers include all external dependencies in the final bundle, this works fine for applications, but if you wish to build a multi-tenant application or a library, you don\u2019t wish to include all dependencies, because you\u2019ll end up with the same dependency duplicated. The externals option allows you to define a list of libraries that are provided and should not be embedded in the build, here is an example : module.exports = { ... \/\/ patterns are strings or globs externals: [\"react\", \"react-dom\", \"squp\", \"squp\/**\"], ... js: { app: { \/\/ You can provide more items here, they will be merged with the main list for this bundle externals: [\"my-plugin\", \"my-plugin\/**\"] ... } } ... } In this example react, react-dom and all modules starting with squp\/ will be treated as external You can see that globs were used here, note that they work for Webpack but rollup.js needs complete strings. With Gulp Gulp will not bundle your files like Webpack and rollup.js do, instead it will generate one output file per input file. This is useful if you are creating a library as it\u2019s the role of the final application to tree-shake what it doesn\u2019t need from your library. Tree-shaking is powerful but is sub-optimal on big files as some code patterns are recognized as side-effects and thus aren\u2019t removed from your bundle even if they aren\u2019t used. Usage with Jest If you include both crafty-preset-babel and crafty-preset-jest. When running your tests with crafty test this preset will be use to convert all .js and .jsx files (source and test files) Configuration Bundle options Option Type Optional ? Runner Description concat Boolean Yes Gulp This will merge all files together, outputting a single file. (This doesn\u2019t resolve imports, use Webpack or rollup.js for this) Adding Babel plugins and presets You can add, replace or remove plugins and add options to our default Babel configuration. To see which plugins are already included, you can go to the Swissquote Preset for Babel page. module.exports = { \/** * Represents the extension point for Babel configuration * @param {Crafty} crafty - The instance of Crafty. * @param {Object} bundle - The bundle that is being prepared for build (name, input, source, destination) * @param {Object} babelConfig - The current Babel configuration *\/ babel(crafty, bundle, babelConfig) { babelConfig.plugins.push( require.resolve(\"@babel\/plugin-transform-property-literals\") ); } }; After you did npm install --save-dev babel-plugin-transform-es5-property-mutators before, Babel will now use this plugin as well in each run. This method is called once per bundle, so you can customize each bundle\u2019s configuration differently.","tags":"","url":"Packages\/crafty_preset_babel\/index.html"},{"title":"JavaScript Features","text":"Table of Contents Introduction EcmaScript 2015\/2016 with Babel Babel Introduction All bundles made with Babel have the same features, regardless of the bundler that was used. Except Gulp that will not use Babel to create your final bundle. EcmaScript 2015\/2016 with Babel By default, when you declare a JavaScript bundle in your crafty.config.js it will be compiled in the simplest possible way. Let\u2019s take this example. { js: { app: { runner: \"webpack\", source: ['js\/app.js'] } } } In this case, this build will run through Webpack and execute the following tasks: Linting with ESLint Resolve dependencies and create one bundle Compile the code using Babel Minify all files with Terser After this, we get a bundle named app.min.js in dist\/js. Both Webpack and rollup.js us Babel to compile modern JavaScript to JavaScript that all browsers understand. Babel Babel is a compiler that gets all its features through plugins. We chose the best plugins in the community to get the best out of it. Our Babel preset contains everything we need for our web applications. The options we have for this preset are environment and browsers. environment is defined automatically from how you run it (crafty run\/watch\/test). browsers is defined from config.browsers. The default list is &quot;&gt; 0.25%, Edge &gt;= 17, Safari &gt;= 11, iOS &gt;= 11, Chrome &gt;= 66, Firefox &gt;= 60, IE &gt;= 11, not op_mini all&quot;. You can override those defaults using any valid Browserslist query source You can override this browsers list in your crafty configuration file.","tags":"","url":"Packages\/crafty_preset_babel\/JavaScript_Features.html"},{"title":"crafty-preset-eslint","text":"Commands jsLint: Lint JavaScript files, this is a facade for ESLint, pre-configured with our preset. Table of Contents Description Linting Installation Configuration Linting options Commands crafty jsLint Description ESLint is the leading tool to lint JavaScript and, using plugins, to lint many flavors of it like TypeScript. Linting This preset comes with the Swissquote JavaScript Guideline. Read more Installation crafty-prest-eslint comes automatically with @swissquote\/crafty-preset-babel so install this only if you only need the linter without the bundler. npm install @swissquote\/crafty-preset-eslint --save module.exports = { presets: [\"@swissquote\/crafty-preset-eslint\"] }; Configuration Linting options You can read about the linting options in the page about Read more Commands crafty jsLint This linter will leverage ESLint to lint your JavaScript files with the Swissquote presets pre-configured. All ESLint CLI options are valid here. The additions made by this command are: Pre-configured rules, defined by eslint-plugin-swissquote activated using --preset. Uses babel-eslint as a parser to support new syntax that ESLint doesn\u2019t understand yet. there are 4 presets available for you : format Base formatting rules, should work on any code (included in legacy and recommended) node Adds environment information for Node.js legacy For all your EcmaScript 5 code recommended For al your EcmaScript 2015+ code, also contains rules for React Setting presets is done with the --preset option The order of the presets is important as some rules might override previous ones. For example: crafty jsLint src\/** --preset format --preset node --preset recommended If no preset is specified recommended is used. If you pass the --fix flag it will fix all the errors it can and write them directly to the file.","tags":"","url":"Packages\/crafty_preset_eslint\/index.html"},{"title":"ESLint IDE Integration","text":"Table of Contents Options Presets IDE plugins ESLint\u2019s IDE integration relies in general on the .eslintrc files (optionally with a .js or .json extension). With the crafty ide command, a configuration file is generated to be read by your IDE. Note that these configuration files should not be committed with your project as they are different for each machine because module paths are absolute. Options When generating the configuration file, you can add arguments to specify which presets you want, if you specify nothing it will use the format preset. Presets format Base formatting rules, should work on any code (included in legacy and recommended) node Adds environment information for Node.js legacy For all your EcmaScript 5 code recommended For al your EcmaScript 2015+ code, also contains rules for React You can use the number of presets you wish, the format preset is the one checked by the hooks You can define them with --preset {presetName} For example running with crafty ide --preset recommended will verify for formatting, common rules, EcmaScript 2015+ specific and React specific rules. IDE plugins Visual Studio Code IntelliJ IDEA","tags":"","url":"Packages\/crafty_preset_eslint\/ESLint_IDE_Integration.html"},{"title":"JavaScript Linting","text":"Linting is the process of verifying your source code for common errors. With the help of ESLint we created a default configuration that follows this standard. Table of Contents Fixing linting errors automatically Linting in development Turning off linting for some parts of your code Disable linting on a line Disable linting on a block of code Disable linting for one or more files Customizing the rules Fixing linting errors automatically Some linting errors, like variable renaming, require an human mind to be fixed, but others don\u2019t. ESLint comes with a useful command line flag to fix the errors automatically. We bundled a command line tool that will leverage this and help you fix your JavaScript errors. Linting in development Linting is important but while writing code, formatting is not the most important thing and failing the build for something as insignificant as a space is more annoying than helpful. That\u2019s why in Crafty, formatting rules are in warning mode during development (with crafty watch) so that you can focus on programming and not on formatting. Turning off linting for some parts of your code You might find yourself surprised with the number of errors you get when you lint your JavaScript files for the first time. Here I\u2019ll explain how to disable linting on some files or part of files, but remember! The linting is here to help you! You should have good reasons to disable linting. Good reasons include: It\u2019s an external library you downloaded, so it should not follow our conventions you are adding a console.log but wrapped in a if statement to check if \u201cconsole\u201d exists in the global scope. Disable linting on a line To be surgical you can also disable the linting on a single line with eslint-disable-line An optional feature is to add which rules are disabled. In this example we disable the no-console rule. We recommend to do this whenever you need to disable linting in a file. You can find the rule name at the end of the error message you get when compiling. if (console) { console.log(\"Les carottes sont cuites\"); \/\/eslint-disable-line no-console } Disable linting on a block of code You should use this possibility if you\u2019re sure of what you do. To disable linting on a block you can add the following comments around your block \/* eslint-disable *\/ \/\/ suppress all warnings between comments alert(\"foo\"); \/* eslint-enable *\/ Disable linting for one or more files When running, ESLint will look for a .eslintignore file in it\u2019s working directory and apply all the patterns to ignore some files. The patterns in your .eslintignore file must match the .gitignore syntax. For example: vendor\/**.css The .eslintignore file\u2019s location changes wether you want to disable linting from Crafty or the Mercurial hooks. For the hooks, the file must be at the root of your repository (next to your .hgignore\/.gitignore). For Crafty, the file must be in the Gulp working directory (generally src\/main\/frontend). Customizing the rules ESLint contains a lot of rules. We created a default set of rules following the Swissquote JavaScript Guideline, but if your project wants stricter rules, you can enable them like that : module.exports = { eslint: { rules: { \"arrow-parens\": [\"error\", \"always\"] } } };","tags":"","url":"Packages\/crafty_preset_eslint\/JavaScript_Linting.html"},{"title":"TypeScript Linting","text":"Since Crafty 1.7.0, We use ESLint to lint TypeScript. This means that the tooling we used for JavaScript is now the same for TypeScript, which means that the documentation for JavaScript Linting applies for TypeScript as well. Differences TypeScript, with its type system can apply more advanced checks to the code. But ESLint doesn\u2019t understand types in its default rule set, that\u2019s why we include the @typescript-eslint\/eslint-plugin plugin to add more advanced rules. The format and recommended presets we have in our own ESLint plugin already include rules for TypeScript out of the box. Customize the rules ESLint contains a lot of rules. We created a default set of rules following the Swissquote JavaScript Guideline, but if your project wants stricter rules, you can enable them like that : module.exports = { eslint: { overrides: { files: [\"**\/*.ts\", \"**\/*.tsx\"], rules: { \"arrow-parens\": [\"error\", \"always\"] } } } };","tags":"","url":"Packages\/crafty_preset_eslint\/TypeScript_Linting.html"},{"title":"crafty-preset-images","text":"This module is a crafty preset to compress images if they\u2019re jpg, png, gif or svg Installation npm install @swissquote\/crafty-preset-images --save-dev module.exports = { presets: [ \"@swissquote\/crafty-preset-images\", \"@swissquote\/crafty-runner-gulp\" ] }; Behind a corporate proxy If you are behind a corporate proxy, or your build machine doesn\u2019t have internet access, this preset\u2019s dependencies will fail. The problem jpg\/png\/gif compression tools are not bundled with their NPM packages, but downloaded from GitHub directly. Open issues about that https:\/\/github.com\/imagemin\/optipng-bin\/issues\/71 https:\/\/github.com\/imagemin\/jpegtran-bin (no open issue, same issue as optipng-bin) https:\/\/github.com\/imagemin\/gifsicle-bin\/issues\/77 The alternative You can use crafty-preset-images-simple instead that will provide the same feature for SVG, but will copy other images over to the destination directory.","tags":"","url":"Packages\/crafty_preset_images.html"},{"title":"crafty-preset-images-simple","text":"This module is a crafty preset to compress images if they\u2019re svg Because of corporate proxy issues, this preset exists as a replacement for crafty-preset-images if you can\u2019t install it. Installation npm install @swissquote\/crafty-preset-images-simple --save-dev module.exports = { presets: [ \"@swissquote\/crafty-preset-images-simple\", \"@swissquote\/crafty-runner-gulp\" ] };","tags":"","url":"Packages\/crafty_preset_images_simple.html"},{"title":"crafty-preset-jest","text":"Compatible Runners Not tied to any runner Linters N\/A Commands test: Jest integrates itself with the crafty test command Related presets Babel TypeScript Crafty provides a preset that will run Jest once crafty test is executed. It adds safe defaults to be able to run your tests with your configuration and provides an extension hook that allows you and other presets to extend its configuration. Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness. While Jest provides browser global variables such as window thanks to jsdom, they are approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks. We recommend that you use a separate tool for browser end-to-end tests if you need them. Table of Contents File name Conventions crafty test Writing Tests Focusing and Excluding Tests Coverage Reporting Snapshot Testing Extending the configuration File name Conventions Jest will look for test files with any of the following popular naming conventions: Files with .js suffix in __tests__ folders. Files with .test.js suffix. Files with .spec.js suffix. The .test.js \/ .spec.js files (or the __tests__ folders) can be located at any depth under the src top level folder. We recommend to put the test files (or __tests__ folders) next to the code they are testing so that relative imports appear shorter. For example, if App.test.js and App.js are in the same folder, the test needs to import App from '.\/App' instead of a long relative path. Using crafty-preset-babel will add jsx as a supported test file extension and crafty-preset-typescript will add the support for ts and tsx To be able to use .ts or .tsx test files, you\u2019ll have to add @types\/jest as a dependency : npm install --save @types\/jest crafty test Running crafty test will run all test and exit. But you can use any option provided by Jest itself. For example crafty test --watch will run your tests in watch mode. This mode will run all your tests once and once it\u2019s done will wait for code or test changes to re-run the concerned tests. Writing Tests To create tests, add it() (or test()) blocks with the name of the test and its code. You may optionally wrap them in describe() blocks for logical grouping but this is neither required nor recommended. Jest provides a built-in expect() global function for making assertions. A basic test could look like this: import sum from \".\/sum\"; it(\"sums numbers\", () =&gt; { expect(sum(1, 2)).toEqual(3); expect(sum(2, 2)).toEqual(4); }); All expect() matchers supported by Jest are extensively documented here. You can also use jest.fn() and expect(fn).toBeCalled() to create \u201cspies\u201d or mock functions. Focusing and Excluding Tests You can replace it() with xit() to temporarily exclude a test from being executed. Similarly, fit() lets you focus on a specific test without running any other tests. Coverage Reporting Jest has an integrated coverage reporter that works well with EcmaScript 2015+ and requires no configuration. Run crafty test --coverage to include a coverage report like this: Note that tests run much slower with coverage. We recommend to run it separately from your normal workflow. Snapshot Testing Snapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. Read more about snapshot testing. Extending the configuration Each preset and crafty.config.js can define the jest(crafty, options) function to override Jest\u2019s configuration. const path = require(\"path\"); const MODULES = path.join(__dirname, \"..\", \"node_modules\"); module.exports = { \/** * Represents the extension point for rollup configuration * @param {Crafty} crafty - The instance of Crafty. * @param {Object} options - The Jest configuration object *\/ jest(crafty, options) { \/\/ Adds this directory to resolve modules options.moduleDirectories.push(MODULES); \/\/ Add a transformer for TypeScript options.transform[\"^.+\\\\.tsx?$\"] = require.resolve(\"ts-jest\"); \/\/ Add file extensions to resolve imports options.moduleFileExtensions.push(\"ts\"); options.moduleFileExtensions.push(\"tsx\"); } }; The full list of available configuration option is available on the official website.","tags":"","url":"Packages\/crafty_preset_jest\/index.html"},{"title":"Jest IDE Integration","text":"Table of Contents IDE plugins Jest\u2019s IDE integration relies in general on the jest.config.js files. With the crafty ide command, a configuration file is generated to be read by your IDE. Note that these configuration files should not be committed with your project as they are different for each machine because module paths are absolute. IDE plugins Visual Studio Code IntelliJ IDEA: Integrated by default","tags":"","url":"Packages\/crafty_preset_jest\/Jest_IDE_Integration.html"},{"title":"crafty-preset-maven","text":"Compatible Runners Works with any runner Linters N\/A Commands N\/A Table of Contents Description Installation Usage Example Override destination with an environment variable Options Description This preset allows you to use crafty within a Maven build (with frontend-maven-plugin). This will discover you pom.xml and get the right folder in target for you. You can use it either with Webjars or Webapps. Installation npm install @swissquote\/crafty-preset-maven --save module.exports = { presets: [\"@swissquote\/crafty-preset-maven\"], mavenType: \"webapp\" \/\/ or \"webjar\" }; Usage The destination directory is calculated using crafty-preset-maven and the mavenType option. You can set the destination path manually but it\u2019s recommended to change the mavenType of your bundle to either webapp or webjar instead. This is the default for each: webapp: ${project.build.directory}\/${project.build.finalName}\/resources webjar: ${project.build.outputDirectory}\/META-INF\/resources\/webjars This preset\u2019s role is to replace config.destination which is used to create the destination for each bundleType (destination_js, destination_css \u2026) Example If we take the following configuration: module.exports = { presets: [ \"@swissquote\/preset-maven\", \"@swissquote\/crafty-preset-babel\", \"@swissquote\/crafty-runner-rollup\" ], mavenType: \"webjar\", js: { library: { source: 'js\/index.js', } } } The path of the final file will be : \u2193 &quot;js&quot; or &quot;css&quot; is added depending on bundle type &lt;maven_root&gt;\/target\/classes\/META-INF\/resources\/webjars\/js\/library.min.js \u2191 Default path for webjars \u2191 Inferred from the bundle name Override destination with an environment variable If your build is running from within Maven, it\u2019s pointless to re-calculate the destination path, you can pass it using the TARGET_BASEDIR environment variable. This is how to do it in frontend-maven-plugin &lt;plugin&gt; &lt;artifactId&gt;frontend-maven-plugin&lt;\/artifactId&gt; ... &lt;configuration&gt; ... &lt;environmentVariables&gt; ... &lt;!-- This values is for webapps --&gt; &lt;TARGET_BASEDIR&gt;${project.build.directory}\/${project.build.finalName}&lt;\/TARGET_BASEDIR&gt; &lt;!-- This value is for webjars --&gt; &lt;TARGET_BASEDIR&gt;${project.build.outputDirectory}&lt;\/TARGET_BASEDIR&gt; &lt;\/environmentVariables&gt; &lt;\/configuration&gt; ... &lt;\/plugin&gt; Options Option Type Optional ? Description mavenType String No Must be &quot;webjar&quot; or &quot;webapp&quot; decides where to put the files.","tags":"","url":"Packages\/crafty_preset_maven.html"},{"title":"crafty-preset-postcss","text":"Compatible Runners Gulp Webpack Linters Provides stylelint, configured with stylelint-config-swissquote Commands cssLint: Lint CSS files, this is a facade for Stylelint, pre-configured with our preset. Table of Contents Description Features Linting Installation Usage with Webpack Hot Module Replacement Extracting CSS Side effects Usage with Gulp Extending from your crafty.config.js Commands crafty cssLint Bundle Options Linting options Description The principle of CSS is easy to grasp, yet CSS is complicated to write at large scales. We want to offer the best experience for writing CSS that is compatible with most browsers without the long configuration process. Features PostCSS is a CSS parser that supports plugins, countless plugins are maintained by a big community, we use a handful of them. Features and examples Linting Stylelint is a wonderful tool to lint CSS in according to your rules, we have a custom configuration preset for Stylelint that comes pre-configured. Read more about it here Installation npm install @swissquote\/crafty-preset-postcss --save module.exports = { presets: [ \"@swissquote\/crafty-preset-postcss\", \"@swissquote\/crafty-runner-webpack\", \/\/ optional \"@swissquote\/crafty-runner-gulp\" \/\/ optional ] }; Usage with Webpack Webpack defines the right loaders to support CSS. To use it, add import &quot;myfile.scss&quot; in your Webpack imported file. Hot Module Replacement When setting hot: true in your crafty.config.js for your main JavaScript bundle, you can enable Hot Module Replacement. With this, the CSS files imported in your Webpack bundles are automatically reloaded upon changes. This is used inside crafty watch, the build mode will not take it into account. Extracting CSS By default, the CSS will be embedded in your bundle, but you can provide the extractCSS option to extract your styles using the MiniCssExtractPlugin. Side effects Be careful when using extractCSS option and sideEffects: false in package.json of your project. Crafty is using css-loader and when you import a CSS file in your project, it needs to be added to the side effect list so it will not be unintentionally dropped in production mode. Webpack docs and examples Usage with Gulp module.exports = { presets: [ \"@swissquote\/crafty-preset-postcss\", \"@swissquote\/crafty-runner-gulp\" ], css: { app: { runner: \"gulp\", \/\/ optional if you have a single runner defined source: \"css\/app.scss\", watch: [\"css\/**\"] } } }; Extending from your crafty.config.js For this you need to add a postcss method to your crafty.config.js module.exports = { \/** * Represents the extension point for Postcss configuration * @param {Crafty} crafty - The instance of Crafty. * @param {ProcessorMap} config - The list of plugins currently configured * @param {Object} bundle - The bundle that is being prepared for build (name, input, source, destination) *\/ postcss(crafty, config, bundle) { \/\/ Add postcss-fixes \/\/ We recommend that for all plugins you add, you set a \"before\", \/\/ because otherwise they run as last plugins and some other plugins might miss some optimizations \/\/ For example if your plugin adds a `calc()` or a `var()` postcss-calc and postcss-custom-properties will already have run config.processor(\"postcss-fixes\").before(\"autoprefixer\"); \/\/ Replace postcss-csso with cssnano, \/\/ - only enabled in production \/\/ - runs before postcss-reporter \/\/ - use cssnano's default preset config.delete(\"postcss-csso\"); config .processor(\"cssnano\") .enableIf(options =&gt; crafty.getEnvironment() === \"production\") .before(\"postcss-reporter\") .setOptions({ preset: \"default\" }); \/\/ Change autoprefixer's options to disable autoprefixing for flexbox const autoprefixerOptions = config.processor(\"autoprefixer\").options; autoprefixerOptions.flexbox = false; \/\/ Override CSS custom properties in code const customProperties = config.processor(\"postcss-custom-properties\") .options; customProperties.variables = { color: \"#fa5b35\" }; } }; Read about the full API Commands crafty cssLint This command will lint CSS files using Stylelint\u2019s CLI too, you can get it\u2019s documentation here. The additions made by this command are: Pre-configured rules, defined by stylelint-config-swissquote activated using --preset. Set the syntax to scss. there are 3 presets available for you : recommended: Contains all BEM specific rules. legacy: Contains rules specific to legacy code. common: Enforces the styleguide of the CSS. (included in both recommended and legacy) Setting presets is done with the --preset option The order of the presets is important as some rules might override previous ones. It can be used the following way: crafty cssLint css\/**\/*.scss --preset recommended If no preset is specified recommended is used. Bundle Options Option Type Optional ? Runner Description extractCSS Boolean \/ String \/ Object Yes Webpack This will extract the CSS out of the bundle, all Official options work, you can also pass true which will use [bundle]-[name].min.css as file name, you can use [bundle] in the file name which is replaced by your bundle name. Linting options You can read about the linting options in the page about CSS Linting","tags":"","url":"Packages\/crafty_preset_postcss\/index.html"},{"title":"CSS Features","text":"PostCSS is a CSS Parser that can be extended with plugins. We made a selection of plugins useful for Swissquote. Here are some features made possible by them. Table of Contents All plugins Organization Nested Styles (postcss-nesting, postcss-nested, postcss-atroot) Import CSS Files (postcss-import, postcss-url) Mixins (sassy-mixins) Comments (postcss-scss) Variables Variables (postcss-advanced-variables, postcss-custom-properties) Property Lookup (postcss-property-lookup) Images Images in CSS (postcss-assets) Image set (postcss-image-set-polyfill) Help with Right-to-left languages (postcss-logical, postcss-dir-pseudo-class) Dynamic Styles Math in your CSS (postcss-calc) Conditionals (postcss-advanced-variables) Loops (postcss-advanced-variables) Initial Values (postcss-initial) Colors (postcss-color-function, postcss-color-gray, postcss-color-hex-alpha, postcss-color-hwb, postcss-color-rebeccapurple, postcss-color-rgb, postcss-color-rgba-fallback, postcss-color-hsl) Color Fallbacks Color manipulation Levels of gray Syntax simplification Selectors (postcss-selector-matches, postcss-selector-not, postcss-pseudo-class-any-link, postcss-custom-selectors) Media Queries (postcss-custom-media, postcss-media-minmax) Fallbacks Vendor Prefixes (autoprefixer) Browser support (postcss-font-family-system-ui, postcss-pseudoelements, postcss-replace-overflow-wrap, postcss-filter-gradient, postcss-font-variant) All plugins All included plugins have a short example accompanying them below. Plugin Description postcss-assets Embed images &amp; size functions postcss-filter-gradient Gradient fallback for IE9 postcss-import Import files postcss-scss Inline comments support postcss-url Update relative URLs after import postcss-advanced-variables Sass-like variables, mixins and loops postcss-nested Sass-like nested selectors postcss-atroot place rules back up to the root postcss-property-lookup reference other property values postcss-dir-pseudo-class Use the :dir() pseudo class for LTR\/RTL postcss-logical New LTR\/RTL and flow related properties autoprefixer Add or remove Vendor prefixes postcss-csso Minify CSS postcss-attribute-case-insensitive Support case insensitive attributes postcss-calc Resolves calculations postcss-color-function W3C color methods postcss-color-gray Shades of gray postcss-color-hex-alpha #rrggbbaa colors postcss-color-hsl Allow to define colors using hsl() postcss-color-hwb hwb() color function postcss-color-rebeccapurple Adds the rebbeccapurple color postcss-color-rgb Change W3C Color Level 4 rgb() to Level 3 postcss-color-rgba-fallback Add an RGB fallback to RGBA colors postcss-custom-media W3C custom media queries postcss-custom-properties W3C custom variables postcss-custom-selectors W3C custom selectors postcss-font-family-system-ui Change system-ui to a font-family list postcss-font-variant Transformed to font-feature-settings postcss-image-set-polyfill Use image-set() for image selection postcss-initial Use initial value for a property postcss-media-minmax W3C &lt; &lt;= &gt;= &gt; media queries postcss-nesting W3C nested selectors postcss-pseudo-class-any-link Allows you to use :any-link pseudo class. postcss-pseudoelements Adjust :: to : postcss-replace-overflow-wrap Converts overflow-wrap to word-wrap postcss-selector-matches W3C :matches() pseudo-classes postcss-selector-not W3C :not() pseudo-classes Organization Nested Styles (postcss-nesting, postcss-nested, postcss-atroot) \/* Before *\/ .parent { background: white; .before { color: #333; } @at-root { .child { background: black; } } .after { color: #eee; } } \/* After *\/ .child { background: black; } .parent { background: white; } .parent .before { color: #333; } .parent .after { color: #eee; } Import CSS Files (postcss-import, postcss-url) With @import, you can import your CSS files to create a single CSS output file. All relative links are updated when they are imported. \/* Before *\/ \/** foo.scss **\/ body { background: #eee; } \/** media\/bar.scss **\/ .button { background: url(\"..\/..\/images\/buttons\/background.png\"); } \/** style.scss **\/ @import \"foo.scss\"; @import \"media\/bar.scss\" (min-width: 25em); \/* After *\/ body { background: #eee; } @media (min-width: 25em) { .button { background: url(\"..\/images\/buttons\/background.png\"); \/* the path has been rebased *\/ } } Mixins (sassy-mixins) @mixin allows to create Sass style mixins. \/* Before *\/ @mixin icon($name) { padding-left: 16px; &amp;::after { content: \"\"; background: url(\/icons\/$(name).png); } } .search { @include icon(search); } \/* After *\/ .search { padding-left: 16px; } .search::after { content: \"\"; background: url(\/icons\/search.png); } Comments (postcss-scss) \/* Before *\/ \/\/ single line comment .button { color: orange; } \/* After *\/ \/* single line comment *\/ .button { color: orange; } Variables Variables (postcss-advanced-variables, postcss-custom-properties) We have two possible ways of using variables: Sass style variables : $variable CSS properties (Official specification): --variable Sass style variables are provided as a compatibility layer. We recommend to use the CSS properties as they are future proof and will be directly supported in browsers in the future. \/* Before *\/ :root { --color: #f00; } $blue: #056ef0; $column: 200px; .menu { width: calc(4 * $column); } .menu_link { color: var(--color); background: $blue; width: $column; } \/* After *\/ .menu { width: calc(4 * 200px); } .menu_link { color: #f00; background: #056ef0; width: 200px; } Property Lookup (postcss-property-lookup) \/* Before *\/ .heading { margin: 20px; padding: @margin; } \/* After *\/ .heading { margin: 20px; padding: 20px; } Images Images in CSS (postcss-assets) \/* Before *\/ body { background: inline( \"background.png\" ); \/* Be careful to not use this on big files *\/ } .button { background: resolve(\"foobar.jpg\"); background: resolve(\"icons\/baz.png\"); width: width(\"foobar.png\"); height: height(\"foobar.png\"); background-size: size(\"foobar.png\"); } \/* After *\/ body { background: url(data:image\/gif;base64,...); } .button { background: url(\"..\/images\/foobar.jpg?14a931c501f\"); background: url(\"..\/images\/icons\/baz.png?14a931c501f\"); width: 320px; height: 240px; background-size: 320px 240px; } Image set (postcss-image-set-polyfill) \/* Before *\/ .BigImage { background-image: image-set( url(img\/test.png) 1x, url(img\/test-2x.png) 2x, url(my-img-print.png) 600dpi ); } \/* After *\/ .BigImage { background-image: url(img\/test.png); } @media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 2\/1), (min-resolution: 192dpi) { .BigImage { background-image: url(img\/test-2x.png); } } @media (-webkit-min-device-pixel-ratio: 6.25), (-o-min-device-pixel-ratio: 25\/4), (min-resolution: 600dpi) { .BigImage { background-image: url(my-img-print.png); } } Help with Right-to-left languages (postcss-logical, postcss-dir-pseudo-class) \/* Before *\/ .Banner { color: #222222; inset: logical 0 5px 10px; padding-inline: 20px 40px; resize: block; } \/\/ `postcss-dir-psseudo-class` .Banner__title:dir(rtl) { margin-right: 10px; } .Banner__title:dir(ltr) { margin-left: 10px; } \/* After *\/ .Banner { color: #222222; top: 0; left: 5px; bottom: 10px; right: 5px; } .Banner:dir(ltr) { padding-left: 20px; padding-right: 40px; } .Banner:dir(rtl) { padding-right: 20px; padding-left: 40px; } .Banner { resize: vertical; } \/\/ `postcss-dir-psseudo-class` [dir=\"rtl\"] .Banner__title { margin-right: 10px; } [dir=\"ltr\"] .Banner__title { margin-left: 10px; } Dynamic Styles Math in your CSS (postcss-calc) \/* Before *\/ :root { --main-font-size: 16px; } body { font-size: var(--main-font-size); } h1 { font-size: calc(var(--main-font-size) * 2); height: calc(100px - 2em); margin-bottom: calc(var(--main-font-size) * 1.5); } \/* After *\/ body { font-size: 16px; } h1 { font-size: 32px; height: calc(100px - 2em); \/\/ em's won't be resolved margin-bottom: 24px; } Conditionals (postcss-advanced-variables) \/* Before *\/ .notice--clear { @if 3 &lt; 5 { background: green; } @else { background: blue; } } \/* After *\/ .notice--clear { background: green; } Loops (postcss-advanced-variables) \/* Before *\/ @each $icon in (foo, bar, baz) { .icon-$(icon) { background: url(\"icons\/$(icon).png\"); } } @for $i from 1 to 3 { .b-$i { width: #{i}px; } } \/* After *\/ .icon-foo { background: url(\"icons\/foo.png\"); } .icon-bar { background: url(\"icons\/bar.png\"); } .icon-baz { background: url(\"icons\/baz.png\"); } .b-1 { width: 1px; } .b-2 { width: 2px; } .b-3 { width: 3px; } Initial Values (postcss-initial) \/* Before *\/ a { animation: initial; background: initial; white-space: initial; } \/* After *\/ a { animation: none 0s ease 0s 1 normal none running; animation: initial; background: transparent none repeat 0 0 \/ auto auto padding-box border-box scroll; background: initial; white-space: normal; } Colors (postcss-color-function, postcss-color-gray, postcss-color-hex-alpha, postcss-color-hwb, postcss-color-rebeccapurple, postcss-color-rgb, postcss-color-rgba-fallback, postcss-color-hsl) Color Fallbacks Some colors functions don\u2019t work in all browsers, these plugins will create fallbacks. rebeccapurple is a whole different story, it\u2019s an homage to Eric Meyer\u2019s daughter. \/* Before *\/ blockquote { background: rgba( 153, 221, 153, 0.8 ); \/\/ This will create a fallback without the alpha border-color: #9d9c; \/\/ This will be transformed to rgba color: rebeccapurple; \/\/ ... sad story, homage to eric meyer } .Quote--clear { background: rgb(250.5 255 255); \/\/ Allows to declare colors with rgb() level 4 color: hsl( 200grad 100% 50% \/ 20% ); \/\/ This will declare colors with hsl() level 4 border-color: hwb(90, 0%, 0%, 0.5); \/\/ This will transform colors to rgba() } \/* After *\/ blockquote { background: #9d9; background: rgba(153, 221, 153, 0.8); border-color: #9d9; border-color: rgba(153, 221, 153, 0.8); color: #639; } .Quote--clear { background: rgb(251, 255, 255); color: hsla(180, 100%, 50%, 0.2); border-color: #80ff00; border-color: rgba(128, 255, 0, 0.5); } Color manipulation You can change a color by applying modifiers. Apart from the ones presented here, there are a lot of modifiers available \/* Before *\/ a { color: color(red alpha(-10%)); \/\/ Change the opacity of red } a:hover { color: color(red blackness(80%)); \/\/ Darken the color } body { color: hwb(90, 0%, 0%, 0.6); \/\/ This will be transformed to rgba } \/* After *\/ a { color: red; color: rgba(255, 0, 0, 0.9); } a:hover { color: #300; } body { color: #80ff00; color: rgba(128, 255, 0, 0.6); } Levels of gray You can also get levels of gray. \/* Before *\/ p { color: gray(85); \/\/ Level of gray background: gray(10%, 50%); \/\/ Level of gray with opacity } \/* After *\/ p { color: #555; background: #1a1a1a; background: rgba(26, 26, 26, 0.5); } Syntax simplification Selectors (postcss-selector-matches, postcss-selector-not, postcss-pseudo-class-any-link, postcss-custom-selectors) These plugins help with the creation \/* Before *\/ @custom-selector :--button button, .button; @custom-selector :--enter :hover, :focus; :--button { \/* styles for your buttons *\/ } :--button:--enter { \/* hover\/focus styles for your button *\/ } p:not(:first-child, .special) { color: red; } p:matches(:first-child, .special) { color: red; } nav :any-link { background-color: yellow; } [frame=\"hsides\" i] { border-style: solid none; } \/* After *\/ .button, button { \/* styles for your buttons *\/ } .button:focus, .button:hover, button:focus, button:hover { \/* hover\/focus styles for your button *\/ } p:not(:first-child):not(.special) { color: red; } p.special, p:first-child { color: red; } nav :link, nav :visited { background-color: #ff0; } [frame=\"hsides\"], [frame=\"Hsides\"], [frame=\"hSides\"], [frame=\"HSides\"], [frame=\"hsIdes\"], [frame=\"HsIdes\"], [frame=\"hSIdes\"], [frame=\"HSIdes\"], [frame=\"hsiDes\"], [frame=\"HsiDes\"], [frame=\"hSiDes\"], [frame=\"HSiDes\"], [frame=\"hsIDes\"], [frame=\"HsIDes\"], [frame=\"hSIDes\"], [frame=\"HSIDes\"], [frame=\"hsidEs\"], [frame=\"HsidEs\"], [frame=\"hSidEs\"], [frame=\"HSidEs\"], [frame=\"hsIdEs\"], [frame=\"HsIdEs\"], [frame=\"hSIdEs\"], [frame=\"HSIdEs\"], [frame=\"hsiDEs\"], [frame=\"HsiDEs\"], [frame=\"hSiDEs\"], [frame=\"HSiDEs\"], [frame=\"hsIDEs\"], [frame=\"HsIDEs\"], [frame=\"hSIDEs\"], [frame=\"HSIDEs\"], [frame=\"hsideS\"], [frame=\"HsideS\"], [frame=\"hSideS\"], [frame=\"HSideS\"], [frame=\"hsIdeS\"], [frame=\"HsIdeS\"], [frame=\"hSIdeS\"], [frame=\"HSIdeS\"], [frame=\"hsiDeS\"], [frame=\"HsiDeS\"], [frame=\"hSiDeS\"], [frame=\"HSiDeS\"], [frame=\"hsIDeS\"], [frame=\"HsIDeS\"], [frame=\"hSIDeS\"], [frame=\"HSIDeS\"], [frame=\"hsidES\"], [frame=\"HsidES\"], [frame=\"hSidES\"], [frame=\"HSidES\"], [frame=\"hsIdES\"], [frame=\"HsIdES\"], [frame=\"hSIdES\"], [frame=\"HSIdES\"], [frame=\"hsiDES\"], [frame=\"HsiDES\"], [frame=\"hSiDES\"], [frame=\"HSiDES\"], [frame=\"hsIDES\"], [frame=\"HsIDES\"], [frame=\"hSIDES\"], [frame=\"HSIDES\"] { border-style: solid none; } Media Queries (postcss-custom-media, postcss-media-minmax) Media queries should be written with min-width and max-width but it leads to unclear declarations. With custom media queries, and query ranges, it\u2019s much easier to write. \/* Before *\/ @media (width &gt;= 500px) and (width &lt;= 1200px) { \/* your styles *\/ } \/* or coupled with custom media queries *\/ @custom-media --medium-screen (width &lt; 500px) or (width &gt; 1200px); @media (--medium-screen) { \/* your styles *\/ } \/* After *\/ @media (min-width: 500px) and (max-width: 1200px) { \/* your styles *\/ } \/* or coupled with custom media queries *\/ @media (max-width: 499px) or (min-width: 1201px) { \/* your styles *\/ } Fallbacks Browsers have the tendency to do everything their way, either with vendor prefixes or by using a custom syntax no other browser supports. These plugins make it easy for you. Vendor Prefixes (autoprefixer) Tired of having to look for what prefix to use in your CSS ? You don\u2019t need this anymore! With Autoprefixer this is all done for you. You can write your CSS following the W3C standards and Autoprefixer will handle the rest for you \/* Before *\/ :fullscreen a { display: flex; } \/* After *\/ :-webkit-full-screen a { display: -webkit-box; display: -webkit-flex; display: flex; } :-moz-full-screen a { display: flex; } :-ms-fullscreen a { display: -ms-flexbox; display: flex; } :fullscreen a { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; } Browser support (postcss-font-family-system-ui, postcss-pseudoelements, postcss-replace-overflow-wrap, postcss-filter-gradient, postcss-font-variant) Some ways of writing CSS are compatible with modern browsers but not with older ones. These plugins ensure some properties include a fallback. They are enabled if your target browsers need those fixes. \/* Before *\/ body { font-family: system-ui; } .button::before { content: attr(href); } .foo { overflow-wrap: break-word; } .buy { background: linear-gradient(to bottom, #1e5799, #7db9e8); } h2 { font-variant-caps: small-caps; } table { font-variant-numeric: lining-nums; } \/* After *\/ body { font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue; } .button:before { content: attr(href); } .foo { word-wrap: break-word; } .buy { background: linear-gradient(to bottom, #1e5799, #7db9e8); filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ff1e5799\", endColorstr=\"#ff7db9e8\", GradientType=0); } h2 { font-feature-settings: \"c2sc\"; font-variant-caps: small-caps; } table { font-feature-settings: \"lnum\"; font-variant-numeric: lining-nums; }","tags":"","url":"Packages\/crafty_preset_postcss\/CSS_Features.html"},{"title":"CSS Linting","text":"For linting we use Stylelint; a CSS linter that works on top of PostCSS and supports plugins. Table of Contents Two available presets: Legacy and Recommended Linting in development Turning off linting for some parts of your code Disable linting for a line Disable linting for a section Disable linting for one or more files Customizing the rules Two available presets: Legacy and Recommended Our linting rules come in two flavors, Legacy and Recommended. Legacy will check the formatting and common practices. Recommended is the full Swissquote CSS Guideline compliance set including the BEM naming conventions. By default, we check in Recommended mode, you can change this parameter with the legacy_css option in your crafty.config.js Linting in development Linting is important but while writing code, formatting is not the most important thing and failing the build for something as insignificant as a space is more annoying than helpful. That\u2019s why in Crafty, formatting rules are in warning mode during development (with crafty watch) so that you can focus on programming and not on formatting. Turning off linting for some parts of your code For obvious reasons, you shouldn\u2019t disable linting on your files, but sometimes, it\u2019s necessary. Some browser specific hacks or other tweaks may come as false positives in the linter or you want to ignore a folder containing external libraries. Disable linting for a line The best is to use this way to silence stylelint, to disable the parts you know to be correct. \/* stylelint-disable-next-line *\/ #id { color: pink !important; \/* stylelint-disable-line declaration-no-important *\/ } As you can see, adding the \/* stylelint-disable-next-line *\/ will ignore all errors on the following line. The next line gives a more interesting example : \/* stylelint-disable-next-line declaration-no-important *\/ we disable the linting for a specific rule. This is the recommended way as you won\u2019t risk silencing errors that would have been useful to you, you can even specify more than one rule, separated by a comma. You can also use the alternative \/* stylelint-disable-line *\/ comment to disable the current line. Disable linting for a section You can also disable linting for one or more blocks \/* stylelint-disable selector-no-id, declaration-no-important *\/ #id { color: pink !important; } \/* stylelint-enable *\/ Disable linting for one or more files When running, Stylelint will look for a .stylelintignore file in it\u2019s working directory and apply all the patterns to ignore some files. The patterns in your .stylelintignore file must match the .gitignore syntax. For example: vendor\/**.css The .stylelintignore file\u2019s location changes wether you want to disable linting from Crafty or the Mercurial hooks. For the hooks, the file must be at the root of your repository (next to your .hgignore\/.gitignore). For Crafty, the file must be in the Gulp working directory (generally src\/main\/frontend). Customizing the rules The library we use for CSS linting (Stylelint) contains a lot of rules. We created a default set of rules following the Swissquote CSS Guideline, but if your project wants stricter rules, you can follow the example here. Be aware that these rules will not be applied to the mercurial hooks. module.exports = { stylelint: { rules: { \"selector-no-type\": true } }, stylelint_legacy: { rules: { \"max-nesting-depth\": [ 2, { ignore: [\"at-rules-without-declaration-blocks\"] } ] } } };","tags":"","url":"Packages\/crafty_preset_postcss\/CSS_Linting.html"},{"title":"Postcss Extension API","text":"PostCSS\u2019 API isn\u2019t well suited to configure which extensions should be executed or not, this task is left to the final user. But Crafty has a bundle of PostCSS plugins that have their own configuration. With this API, we try to provide a rich API that allows you to add, remove, reconfigure and reorder plugins. Even better, we provide some ways to conditionally enable plugins. Extending from your crafty.config.js For this you need to add a postcss method to your crafty.config.js module.exports = { \/** * Represents the extension point for Postcss configuration * @param {Crafty} crafty - The instance of Crafty. * @param {ProcessorMap} config - The list of configured plugins *\/ postcss(crafty, config) { \/\/ Add postcss-fixes \/\/ We recommend that for all plugins you add, you set a \"before\", \/\/ because otherwise they run as last plugins and some other plugins might miss some optimizations \/\/ For example if your plugin adds a `calc()` or a `var()` postcss-calc and postcss-custom-properties will already have run config.processor(\"postcss-fixes\").before(\"autoprefixer\"); \/\/ Replace postcss-csso with cssnano, \/\/ - enabled in production, disabled otherwise \/\/ - runs before postcss-reporter \/\/ - use cssnano's default preset config.delete(\"postcss-csso\"); config .processor(\"cssnano\") .enableIf(options =&gt; crafty.getEnvironment() === \"production\") .before(\"postcss-reporter\") .setOptions({ preset: \"default\" }); \/\/ Change autoprefixer's options to disable autoprefixing for flexbox const autoprefixerOptions = config.processor(\"autoprefixer\").options; autoprefixerOptions.flexbox = false; \/\/ Override CSS custom properties in code const customProperties = config.processor(\"postcss-custom-properties\") .options; customProperties.variables = { color: \"#fa5b35\" }; } }; ProcessorMap The main object allows you add or remove elements from the map class ProcessorMap { \/** * Allows you to add or change a processor, * The name will be used to load the plugin if nothing else is specified. *\/ processor(moduleName: string): Processor; \/** * Remove all entries *\/ clear(): ProcessorMap; \/** * Delete a single processor * @param name The processor to remove *\/ delete(name: string): ProcessorMap; \/** * Check if a processor is configured *\/ has(name: string): boolean; \/** * An array of all the values in the map, sorted. *\/ values(): Processor[]; \/* * Returns an object of all the entries in the backing Map * where the key is the object property, and the value * corresponding to the key. Will return `undefined` if the backing * Map is empty. * This will order properties by their name if the value is * a ProcessorMap that used .before() or .after(). *\/ entries(): { [name: string]: Processor }; } Processor class &lt;OPTIONS&gt; Processor&lt;OPTIONS = Object&gt; { constructor(name: string); options: OPTIONS \/** * Same as the constructor parameter, allows you to change * which module will be loaded for this processor. *\/ module(moduleName: string): Processor; \/** * Provide a custom init callback, needed if your plugin * is a function or needs more than one parameter. * This is an alternative to `.module(name)`. * * .init(options =&gt; require(\"my-postcss-plugin\")(options)) * * @param fun The function that will return the instance of the plugin *\/ init(fun: (options: OPTIONS): PluginInstance): Processor; \/** * Returns a boolean to tell if the processor is enabled or not. * * @param fun *\/ enableIf(fun: (options: OPTIONS): boolean): Processor; \/** * Enables the plugin if the spec it implements isn't * supported by all browsers that are targeted * * @param caniuseFeature The name of the CSS spec that it implements * @param browsers the list of browsers that target *\/ enableIfUnsupported(caniuseFeature: string|string[], browsers: string): Processor; \/** * Change all the options at once. * * @param {Object} options The new options object *\/ setOptions(options: OPTIONS): Processor; \/** * Specify before which plugin this plugin has to run. * Must not be set at the same time as \".after()\" * * @param {string} name The name of the plugin before which we must run *\/ before(name): Processor; \/** * Specify after which plugin this plugin has to run. * Must not be set at the same time as \".before()\" * * @param {string} name The name of the plugin before which we must run *\/ after(name): Processor; } Examples Add a new processor after another one","tags":"","url":"Packages\/crafty_preset_postcss\/Postcss_Extension_API.html"},{"title":"Stylelint IDE Integration","text":"Table of Contents IDE plugins stylelint\u2019s IDE integration relies in general on the stylelint.config.js files. With the crafty ide command, a configuration file is generated to be read by your IDE. The generated file will be different if you use the legacy_css option in your crafty.config.js file. Note that these configuration files should not be committed with your project as they are different for each machine because module paths are absolute. IDE plugins Visual Studio Code IntelliJ IDEA","tags":"","url":"Packages\/crafty_preset_postcss\/Stylelint_IDE_Integration.html"},{"title":"crafty-preset-prettier","text":"Description crafty-preset-prettier is a preset that is here only to provide IDE integration for your Prettier configuration. You don\u2019t need to install it directly as it comes as a dependency of the presets that need it. By running crafty ide this preset will create a prettier.config.js in your working directory.","tags":"","url":"Packages\/crafty_preset_prettier.html"},{"title":"crafty-preset-react","text":"Compatible Runners Webpack Test Runners Jest Related presets Babel TypeScript Jest This preset provides Hot Module Replacement in React projects. Table of Contents Installation Hot Module Replacement TypeScript Installation npm install @swissquote\/crafty-preset-babel --save module.exports = { presets: [ \"@swissquote\/crafty-preset-babel\", \/\/ also works with crafty-preset-typescript \"@swissquote\/crafty-runner-webpack\", \/\/ optional \"@swissquote\/crafty-preset-react\" ], js: { app: { runner: \"webpack\", source: \"js\/app.js\", hot: true, \/\/ Hot Module Replacement must be enabled for React Hot Loader to work react: true \/\/ React Hot Loader must be explicitly enabled in your bundle } } }; Hot Module Replacement When doing modern JavaScript development, the usual process is Write code, Compile, Refresh the browser. crafty watch removes the Compile step because it\u2019s run automatically. Hot Module Replacement (HMR) was created to remove the Refresh the browser part. More precisely, when doing a build with Webpack, in development mode, a Websocket client is added to the build and a small HTTP server is started. When the page is loaded, each bundle will establish a Websocket connection to the server. When you change a line of code, the server will rebuild them and send a notification through Websockets to the browser, the browser will then download the patch and apply the code change. With React components, it will even re-render them without losing the current state. Here\u2019s an example : To enable HMR on your react application, you must set hot: true and react: true on your bundle in crafty.config.js. Then you must mark your root component as hot-exported : import React from \"react\"; import { hot } from \"react-hot-loader\"; const App = () =&gt; &lt;div&gt;Hello World!&lt;\/div&gt;; export default hot(module)(App); Only the root component needs this wrapping, the child components don\u2019t need it. TypeScript If you\u2019re using TypeScript you have one more step to make npm install --save @types\/webpack-env Read more about Hot Module Replacement","tags":"","url":"Packages\/crafty_preset_react.html"},{"title":"crafty-preset-typescript","text":"Compatible Runners rollup.js Webpack Test Runners Jest Linters Provides ESLint, with full configuration for TypeScript. Based on the same configuration we use in JavaScript. Table of Contents Description Features Linting Installation Usage with Webpack \/ rollup.js Usage with Jest Type definition files Getting Started crafty jsLint Description Microsoft presents TypeScript as \u201cJavaScript that scales\u201d. TypeScript is a superset of JavaScript that allows you to type your code. Not everything needs to have a type as the tool is powerful enough to infer most of the types. TypeScript has types but it also supports the full EcmaScript 2015 Specification. Features TypeScript being a superset of JavaScript, features supported by our Babel preset apply here. Or you can check out the TypeScript specific features Linting Like any language, TypeScript has best practices and practices that you shouldn\u2019t do. With the help of ESLint we check the code for common mistakes and formatting errors. Read more Installation npm install @swissquote\/crafty-preset-typescript --save module.exports = { presets: [ \"@swissquote\/crafty-preset-typescript\", \"@swissquote\/crafty-runner-webpack\", \/\/ optional \"@swissquote\/crafty-runner-rollup\" \/\/ optional ], js: { app: { runner: \"webpack\", \/\/ Webpack or rollup.js (optional if you have a single runner defined) source: \"js\/app.ts\" } } }; Usage with Webpack \/ rollup.js Both offer the same level of integration. You have to configure TypeScript with the tsconfig.json file that you put at the root of the project. Some options can\u2019t be auto-configured through the loaders \/ plugins so that\u2019s why you have to do it yourself. Moreover, the integration with your IDE is simplified if you have a complete tsconfig.json in your project. Usage with Jest If you include both crafty-preset-typescript and crafty-preset-jest. When running your tests with crafty test this preset will be use to convert all .ts and .tsx files (source and test files) Type definition files TypeScript is also able to understand Types on libraries written in pure JavaScript this is done through types definition files. Some packages come with their own definitions, for the others there are two ways to consume these files. Use @types scoped packages from NPM Create your own *.d.ts file Read more Getting Started We have a user guide to get started with TypeScript in your project Follow the guide crafty jsLint Leveraging ESLint, we add configuration to lint TypeScript. You can use that using the same command as for JavaScript. crafty jsLint src\/** If you pass the --fix flag it will fix all the errors it can and write them directly to the source file.","tags":"","url":"Packages\/crafty_preset_typescript\/index.html"},{"title":"Getting Started with TypeScript","text":"Like for an EcmaScript 2015 bundle, you must set webpack: true in your crafty.config.js for your bundle. Prerequisite To make the compilation work with TypeScript, you need to add a tsconfig.json file at the root of your project with the following content. { \"exclude\": [\"node_modules\", \"node\"], \"compilerOptions\": { \"moduleResolution\": \"node\", \"charset\": \"UTF-8\", \"jsx\": \"react\", \"module\": \"esnext\", \/\/ Enables Tree shaking for Webpack and rollup.js \"sourceMap\": true, \"target\": \"es5\", \"lib\": [\"DOM\", \"ES2017\", \"DOM.Iterable\", \"ScriptHost\"] \/\/ Makes it easier to write ES6, be careful to include mixins accordingly. } } All configuration options. If you plan to create a library You can ask TypeScript to also export all Type definitions along with the code, this is how you do it: { \"compilerOptions\": { \"declaration\": true } } Note that if you use Webpack, requesting the creation of declaration disables an internal optimization that uses workers to check the validity of your TypeScript files. So make sure that you actually need declarations as they have a non-negligible generation cost. Most basic example Create a bundle like this: { yourBundleName: { webpack: true, source: \"js\/main.ts\" } } Then create a js\/main.ts file with the following content interface Person { firstName: string; lastName: string; } function greeter(person: Person) { return \"Hello, \" + person.firstName + \" \" + person.lastName; } var user = { firstName: \"Jane\", lastName: \"User\" }; console.log(greeter(user)); When running Gulp, you will get your compiled TypeScript file in js\/yourBundleName.min.js More features Using Typings To leverage external libraries in your project, you need to configure TypeScript to be able to read your definition files. If you use Typings from the @types scoped packages you don\u2019t need this configuration. But for the definitions downloaded with typings or your own, you need to tell TypeScript to load them. for this, you need to create a tsconfig.json next to your crafty.config.js and add a &quot;files&quot; array inside. { \"files\": [\".\/typings\/index.d.ts\"] } Read more about Typings","tags":"","url":"Packages\/crafty_preset_typescript\/Getting_Started_with_TypeScript.html"},{"title":"TypeScript Features","text":"Table of Contents Language features Interfaces Union types Other IDE Integration Language features TypeScript is a superset of EcmaScript 2015, in this section we will cover what is added on top of it. For EcmaScript 2015 features, you can check out our Babel preset\u2019s features. Interfaces A useful feature for types is interfaces, unlike other strongly typed languages, interfaces can contain fields and optional fields. This allows you to create on-the-fly type definitions without creating an actual class in the output JavaScript. interface Person { firstName: string; lastName: string; } function greeter(person: Person) { return \"Hello, \" + person.firstName + \" \" + person.lastName; } var user = { firstName: \"Jane\", lastName: \"User\" }; document.body.innerHTML = greeter(user); Union types Due to the nature of JavaScript, your code can receive parameters that are sometimes a string and sometimes an object. Union types come to the rescue : type Shape = Square | Rectangle | Circle; function area(s: Shape) {} You can also use it to define strict values, more precise than string : function direction(k: \"left\" | \"right\") { \/\/ The value of k is \"left\" or \"right\" } Other readonly properties in interfaces and classes Generic Types JSX Support (with the .tsx extension) Decorators Type Aliases (type PrimitiveArray = Array&lt;string|number|boolean&gt;;) Read more IDE Integration TypeScript being out for years now, it has first class support in IDE\u2019s like IntelliJ, Visual Studio Code and others. The IDE directly understands types and type definition files and is able to propose auto completion and refactoring out of the box.","tags":"","url":"Packages\/crafty_preset_typescript\/TypeScript_Features.html"},{"title":"TypeScript Typings","text":"There are two ways to get Type Definition files ( also known as Typings ) in your project Table of Contents 1. Use @types scoped packages from NPM 2. Create your own *.d.ts file 1. Use @types scoped packages from NPM Starting with TypeScript 2, Typings can automatically be loaded from NPM packages. If for example you use lodash, you can install npm install @types\/lodash and the types are loaded automatically. The definition files that are in these packages are loaded form the same place as I did some tests, it looks like type definitions are found if you do import _ from 'lodash'; but not if you do import _add from 'lodash\/add';. It seems packages with nothing after the package name are taken in account but nothing else. 2. Create your own *.d.ts file You can create your own definition files using the Official documentation.","tags":"","url":"Packages\/crafty_preset_typescript\/TypeScript_Typings.html"},{"title":"babel-preset-swissquote","text":"Swissquote Preset for Babel This package includes the Babel preset used by Crafty. This preset will do the following for you: Transform EcmaScript 2015+ back to EcmaScript 5, according to the list of browsers you support. (@babel\/preset-env) Handle non-standard class properties (@babel\/plugin-proposal-class-properties) Polyfills the runtime needed for async\/await and generators (@babel\/plugin-transform-runtime) Convert JSX to JavaScript (@babel\/preset-react) [prod] Remove React Prop Types in production ( babel-plugin-transform-react-remove-prop-types ) Options Option Default Effect environment `process.env.BABEL_ENV browsers babel-preset-env\u2019s default + IE9 Sets the list of browsers to support, must be a valid Browserslist query deduplicateHelpers false Defines if the babel helpers (like createClass) should be in each file or referenced once useESModules false Defines if @babel\/plugin-transform-runtime should use ES modules or commonjs modules Usage in Crafty The easiest way to use this configuration is with Crafty, which includes it by default. You don\u2019t need to install it separately in Crafty projects. Usage Outside of Crafty If you want to use this Babel preset in a project not built with Create React App, you can install it with following steps. First, install Babel. Then create a file named .babelrc with following contents in the root folder of your project: { \"presets\": [\"@swissquote\/swissquote\"] }","tags":"","url":"Packages\/babel_preset_swissquote.html"},{"title":"eslint-plugin-swissquote","text":"Swissquote ESLint preset Features Provide a style guide for your JavaScript Warns on common mistakes in JavaScript Works with EcmaScript 2015+ using the babel-eslint parser Presets This plugin comes with four presets format Base formatting rules, should work on any code (included in legacy and recommended) node Adds environment information for Node.js legacy For all your EcmaScript 5 code recommended For all your EcmaScript 2015+ code, also contains rules for React Included plugins the recommended preset includes three plugins: eslint-plugin-import provides some rules to clean imports. eslint-plugin-react ensures you follow some best practices with React. eslint-plugin-react-hooks ensures you follow some best practices with React Hooks. eslint-plugin-sonarjs provides some advanced rules made by the guys at SonarQube. To make it easy to install this plugin, those rules are added to ESLint automatically, but prefixed with swissquote\/. This is due to a limitation with ESLint that doesn\u2019t allow us to add plugins to ESLint through an API. Usage Include them with in your projects like this: { \"plugins\": [\"@swissquote\/swissquote\"], \"extends\": [\"plugin:@swissquote\/swissquote\/recommended\"] }","tags":"","url":"Packages\/eslint_plugin_swissquote.html"},{"title":"postcss-swissquote-preset","text":"PostCSS Swissquote Preset Features Organization Nested Styles (postcss-nesting, postcss-nested, postcss-atroot) Import CSS Files (postcss-import, postcss-url) Comments (postcss-scss) Variables Variables and Mixins (postcss-advanced-variables, postcss-custom-properties) Property Lookup (postcss-property-lookup) Images Images in CSS (postcss-assets) Dynamic Styles Math in your CSS (postcss-calc) Conditionals (postcss-advanced-variables) Loops (postcss-advanced-variables) Initial Values (postcss-initial) Colors (postcss-color-function, postcss-color-gray, postcss-color-hex-alpha, postcss-color-hwb, postcss-color-rebeccapurple, postcss-color-rgba-fallback) Syntax simplification Selectors (postcss-selector-matches, postcss-selector-not, postcss-pseudo-class-any-link, postcss-custom-selectors) Media Queries (postcss-custom-media, postcss-media-minmax) Fallbacks Vendor Prefixes (autoprefixer) Browser support (postcss-pseudoelements, postcss-replace-overflow-wrap, postcss-filter-gradient, postcss-font-variant) See details in CSS Features. Presets Usage within Crafty This preset is included in the styles preset, you don\u2019t need to include anything specific Usage outside Crafty npm install @swissquote\/postcss-swissquote-preset --save options postcss([ require(\"@swissquote\/postcss-swissquote-preset\")({ config: { browsers: \"ie 9, last 3 versions\", \/\/ A Browserslist compatible browsers list environment: \"production\" \/\/ (optional) The current environment to compile to, will also use the `NODE_ENV` variable, or will fallback to \"production\" } }) ]);","tags":"","url":"Packages\/postcss_swissquote_preset.html"},{"title":"stylelint-config-swissquote","text":"Swissquote Stylelint configuration Features Lint style sheets following the Swissquote CSS Guideline (on form and function). Uses standard Stylelint rules and includes 4 custom rules. Provides a simpler standard for legacy code. Presets recommended: Contains all BEM specific rules. legacy: Contains rules specific to legacy code. common: Enforces the styleguide of the CSS. (included in both recommended and legacy) Rules no-hack-reassignment: Hacks (._*) must be applied directly on the concerned element. no-state-without-component: States (.is-*|.has-*) must appear next to a component. no-type-outside-scope: Types (a, div \u2026) must appear inside a scope (.s-*). no-utility-reassignment: Utilities (.u-*) must be applied directly on the concerned element. no-negative-var: Using var() doesn\u2019t work as you would expect it to return a negative value, but it just parses the function as -var() and never executes it. Usage within Crafty Crafty includes those rules and presets by default, you don\u2019t need to do any specific action to use them. Usage outside Crafty Outside Crafty, you have to use it as you would for any Stylelint plugin or preset. You install it: npm install @swissquote\/stylelint-config-swissquote --save You import the plugin and extend from it: { \"plugins\": [\"@swissquote\/stylelint-config-swissquote\"], \"extends\": [\"@swissquote\/stylelint-config-swissquote\/recommended\"], \"rules\": { \/\/ your custom rules here } }","tags":"","url":"Packages\/stylelint_config_swissquote.html"},{"title":"CLI","text":"Crafty comes with some commands by default and presets can add new commands. Here are the default commands: Table of Contents crafty crafty run [task [task...]] crafty watch crafty test Commands added by presets crafty cssLint [file|dir|glob]* crafty jsLint [file|dir|glob]* crafty Will list the available commands and tasks. crafty run [task [task...]] This is the main entry point to execute one or more tasks in Crafty. Running crafty run without a task will execute the default task. You can specify one or more tasks to run, separated by space. crafty watch Running the watch mode will execute all tasks once at the start. After that, it will watch for file system changes and re-execute related tasks once a change occurs. All presets can add watchers for any file pattern or use their embedded watcher (like Webpack). crafty test Presets can register test runners, when running crafty test all these test runners are invoked. We have one test runner which is provided as a preset; Jest. Commands added by presets crafty cssLint [file|dir|glob]* Bundled Stylelint with embedded presets, read more here crafty jsLint [file|dir|glob]* Bundled ESLint with embedded presets, read more here","tags":"","url":"CLI.html"},{"title":"IDE Integration","text":"Table of Contents Using this feature Existing integrations Works best with One thing that\u2019s great about Crafty is that you don\u2019t end up with a folder full of configuration files in your project, the downside is that IDEs use those configuration files to give you an out-of-the-box experience by reading these configuration files. For this reason, we implemented crafty ide. This command will generate the configuration files in your project so that your IDE can give you the out-of-the-box experience you want. Note that these configuration files should not be committed with your project as they are different for each machine because module paths are absolute. Using this feature Once Crafty is installed and you created your crafty.config.js, run crafty ide and the configuration files for your tools will be generated. We strongly recommend adding those generated configuration files to your .gitignore file to not mistakenly commit them Some integrations, like ESLint support command line options to tweak the generated configuration. Existing integrations Three presets use this feature: ESLint stylelint Jest Works best with This feature was tested with Visual Studio Code and IntelliJ IDEA (Webstorm, PHPStorm, \u2026). But since it works by using the standard files of these tools it should work with any IDE that has a plugin for those tools.","tags":"","url":"IDE_Integration.html"},{"title":"Troubleshooting","text":"Here are a list of common errors you might see while configuring or using Crafty \u2018use strict\u2019 is unnecessary inside of modules With Babel 6, &quot;use strict&quot; is added automatically to your files, you can delete this statement from all your files.","tags":"","url":"Troubleshooting.html"},{"title":"Why","text":"Table of Contents Why we created Crafty Features Update frequency Compatibility Configurability Community Why we developed our solution instead of an existing one Why we created Crafty This package is a helper to compile your scripts to the best, optimized, compressed and understood by all browser versions of the code you write. It takes the best tools choices of the community between the amount of options for the task at hand (Sass, Less, Stylus, PostCSS, Traceur, Babel, rollup.js, Browserify, Webpack, Pundle, ESLint, JSHint, Gulp, Broccoli, Grunt) With a consideration for features, configurability, update frequency, compatibility and community. All these tools are then configured to work together seamlessly and to get the best out of each one. Features We support the full EcmaScript 2015 and EcmaScript 2016 Specifications, Advanced CSS with the help of PostCSS and also TypeScript. The features are best explained in each specific section : JavaScript, TypeScript, CSS Update frequency Almost all the tools we use in this project are update more than once a month. Keeping the more than 70 dependencies up to date on this project is a continuous task. But it would be even more complex if it needs to be done on all Swissquote projects separately. Compatibility The tools and plugins are chosen to work together. We made Pull Requests to some projects to ensure they are compatible with one another and we keep track of the open problems. Configurability All tools of this type have dozens of configuration options. Knowing them all is impossible. With Crafty we embedded all options that need to respect the Swissquote Standards (Our CSS and JavaScript Guideline for example) But we also expose a lot of configuration options to the final user. By doing it this way, you can have advanced features without any complex configuration, but can tweak most configurations to your specific needs. Community The community around tools like Babel, ESLint, Webpack and others are thriving. Tens of issues are created and resolved each week, new features come often, always improved documentation and reliability. Why we developed our solution instead of an existing one Some solutions outside Swissquote do a similar job, like neutrino. But they tend to be too opinionated and not offering options to tailor the solution to our needs. Or they are made for one specific tool. For example: create-react-app is meant to create React applications with Babel and Webpack. You can\u2019t use TypeScript and you are limited to one bundle. neutrino is more configurable but still allows to is limited to one bundle and Webpack.","tags":"","url":"Why.html"}]});